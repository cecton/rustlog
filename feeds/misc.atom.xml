<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Rustlog</title><link href="https://lifthrasiir.github.io/rustlog/" rel="alternate"></link><link href="https://lifthrasiir.github.io/rustlog/feeds/misc.atom.xml" rel="self"></link><id>https://lifthrasiir.github.io/rustlog/</id><updated>2016-06-02T23:58:00+09:00</updated><entry><title>Why is a Rust executable large?</title><link href="https://lifthrasiir.github.io/rustlog/why-is-a-rust-executable-large.html" rel="alternate"></link><published>2016-06-02T23:58:00+09:00</published><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2016-06-02:rustlog/why-is-a-rust-executable-large.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Update (2016-10-07):&lt;/strong&gt; The &lt;a href="https://www.rust-lang.org/en-US/faq.html"&gt;official FAQ&lt;/a&gt; has &lt;a href="https://www.rust-lang.org/en-US/faq.html#why-do-rust-programs-use-more-memory-than-c"&gt;an entry for this exact problem&lt;/a&gt; now. I'll leave this post as more curiously minded people.&lt;/p&gt;
&lt;p&gt;See also the &lt;a href="https://www.reddit.com/r/rust/comments/4m7kha/rustlog_why_is_a_rust_executable_large/"&gt;/r/rust discussion&lt;/a&gt; and &lt;a href="https://news.ycombinator.com/item?id=11823949"&gt;Hacker News thread&lt;/a&gt; at the time of writing.&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Do you want a quick takeaway? &lt;a href="#takeaway"&gt;Go to the end of post.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Suppose that you are a programmer primarily working with compiled languages. Somehow you’ve gotten tired of those languages, for multiple valid reasons, and heard of a trendy new programming language called &lt;a href="https://rust-lang.org/"&gt;Rust&lt;/a&gt;. Looking at some webpages and the &lt;a href="https://user.rust-lang.org/"&gt;official forum&lt;/a&gt;, it looks great and you decide to try it out. It seems that Rust was a bit cumbersome to install in the past, but thanks to &lt;a href="https://rustup.rs/"&gt;rustup&lt;/a&gt; that problem seems gone  now. Cargo seems to be great, so you follow the &lt;a href="https://doc.rust-lang.org/book/"&gt;first sections of the Book&lt;/a&gt; and put together a small greeting to the new language:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Amazingly &lt;code&gt;cargo run&lt;/code&gt; runs without a hassle. It is kind of a miracle as you are used to configuring a build script, Makefile, project, or whatever before building things. Impressed, you notice that the executable is available in &lt;code&gt;target/debug/hello&lt;/code&gt;. You instinctively type out &lt;code&gt;ls -al&lt;/code&gt; (or is it &lt;code&gt;dir&lt;/code&gt;?) and you cannot believe your eyes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ls -al target/debug/hello
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir 650711 May 31 20:00 target/debug/hello*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;650 &lt;em&gt;kilobytes&lt;/em&gt; to print anything?! You remember that Rust is probably the sole language that may possibly displace C++, and C++ is noted for its code bloat; would that mean Rust failed to fix one of C++’s big problems? Out of curiosity, you make the same program in C and compile it. The result is eye-opening:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cat hello-c.c
&lt;span class="gp"&gt;#&lt;/span&gt;include &amp;lt;stdio.h&amp;gt;
&lt;span class="go"&gt;int main() {&lt;/span&gt;
&lt;span class="go"&gt;    printf(&amp;quot;Hello, World!\n&amp;quot;);&lt;/span&gt;
&lt;span class="go"&gt;}&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; make hello-c
&lt;span class="gp"&gt;$&lt;/span&gt; ls -al hello-c
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir 8551 May 31 20:03 hello-c*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Maybe C has the benefit of having bare-metal libraries&lt;/em&gt;, you think. This time you try a C++ program using &lt;code&gt;iostream&lt;/code&gt;, which should be much safer than C’s naive &lt;code&gt;printf&lt;/code&gt;. But surprisingly it still seems tiny compared to Rust:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cat hello-cpp.cpp
&lt;span class="gp"&gt;#&lt;/span&gt;include &amp;lt;iostream&amp;gt;
&lt;span class="go"&gt;using namespace std;&lt;/span&gt;
&lt;span class="go"&gt;int main() {&lt;/span&gt;
&lt;span class="go"&gt;    cout &amp;lt;&amp;lt; &amp;quot;Hello, World!&amp;quot; &amp;lt;&amp;lt; endl;&lt;/span&gt;
&lt;span class="go"&gt;}&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; make hello-cpp
&lt;span class="gp"&gt;$&lt;/span&gt; ls -al hello-cpp
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir 9168 May 31 20:06 hello-cpp*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What is wrong with Rust?&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;It seems that the surprisingly large size of a Rust binary is a massive concern for many. This question is by no means new; there is a well-known, albeit year-old, &lt;a href="https://stackoverflow.com/questions/29008127/why-are-rust-executables-so-huge"&gt;question&lt;/a&gt; on StackOverflow, and searching for &lt;a href="https://duckduckgo.com/?q=why+is+rust+binary+large"&gt;“why is rust binary large”&lt;/a&gt; gives several more. Given the frequency of such questions, it is a bit surprising that we don’t yet have a definitive article or page dealing with them. So this is my attempt to provide one.&lt;/p&gt;
&lt;p&gt;Just to be cautious: Is it a valid question to ask in the first place? We have hundreds of gigabytes of storage, if not terabytes, and people should be using decent ISPs nowadays, so the binary size should not be a concern, right? The answer is that it may still matter (though not as much as before):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.akamai.com/us/en/our-thinking/state-of-the-internet-report/state-of-the-internet-connectivity-visualization.jsp"&gt;Akamai State of the Internet&lt;/a&gt; shows that, while more than 80% of users enjoy 4Mbps or more in developed countries, far fewer users do in developing countries. The average connection has improved a lot (almost every country is now past 1Mbps average), but the entire distribution is still stagnating. I'm fortunate enough to be in a country where gigabit ethernet only costs $30/mo (!), but many others may not be.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ordinary consumers have only a shallow understanding of computing, and they are likely to relate any problem they encounter with anything they know of.  One of the common sentiments is that the executable bloat causes slowdown. That’s unfortunate but true, and you would want to avoid that sentiment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For wondering readers: All examples are tested in Rust 1.9.0 and 1.11.0-nightly (&lt;code&gt;a967611d8&lt;/code&gt; 2016-05-30). Unless noted, the primary operating system used is Linux 3.13.0 on x86-64. Your mileage may vary.&lt;/p&gt;
&lt;h2&gt;Optimization Level&lt;/h2&gt;
&lt;p&gt;If asked about the above, virtually every experienced Rust user would ask you back:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Have you enabled the release build?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It turns out that Cargo distinguishes the debug build (default) from the release build (&lt;code&gt;--release&lt;/code&gt;). The &lt;a href="http://doc.crates.io/manifest.html#the-profile-sections"&gt;Cargo documentation&lt;/a&gt; explains the exact differences between them, but in general the release build gets rid of development-only routines and data and enables tons of optimizations. It is not the default because, well, the debug build is more frequently requested than the release build.&lt;/p&gt;
&lt;p&gt;Note that Jorge Aparicio has correctly &lt;a href="https://www.reddit.com/r/rust/comments/4m7kha/rustlog_why_is_a_rust_executable_large/d3t9yuj"&gt;pointed out&lt;/a&gt; that the release build does not produce the smallest possible binary. That’s because the release build defaults to optimization level 3 (&lt;code&gt;-C opt-level=3&lt;/code&gt;), which may sacrifice some size for performance. The size-optimizing level (&lt;code&gt;-C opt-level=s&lt;/code&gt; or &lt;code&gt;-C opt-level=z&lt;/code&gt;) has recently &lt;a href="https://github.com/rust-lang/rust/pull/32386"&gt;landed&lt;/a&gt;, so you may use that later. For now, however, we'll stick to the default.&lt;/p&gt;
&lt;p&gt;Let’s try the release build!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cargo build --release
&lt;span class="gp"&gt;$&lt;/span&gt; ls -al target/release/hello
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir 646467 May 31 20:10 target/release/hello*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that didn’t really make a difference! This is because the optimization is only run over the user code, and we don’t have much user code. Almost all of the binary is from the standard library, and it's not clear whether we can do anything about that...&lt;/p&gt;
&lt;h2&gt;Link-time Optimization (LTO)&lt;/h2&gt;
&lt;p&gt;…except that we can. Enter the world of link-time optimization.&lt;/p&gt;
&lt;p&gt;So the story is as follows: We can individually optimize each crate, and in fact all standard libraries ship in the optimized form. Once the compiler produces an optimized binary, it gets assembled to a single executable by a program called “the linker”. But we don’t need the entirety of standard library: a simple “Hello, world” program definitely does not need &lt;a href="https://doc.rust-lang.org/std/net/"&gt;&lt;code&gt;std::net&lt;/code&gt;&lt;/a&gt; for example. Yet, the linker is so stupid that it won’t try to remove unused parts of crates; it will just paste them in.&lt;/p&gt;
&lt;p&gt;There is actually a good reason that the traditional linker behaves like this. The linker is commonly used in the C and C++ languages among others, and each file is compiled individually. This is a sharp difference from Rust where the entire crate is compiled altogether. Unless required functions are scattered throughout the files, the linker can fairly easily get rid of unused files all at once. It’s not perfect, but reasonably approximates what we want: removing unused functions. One disadvantage is that the compiler is unable to optimize function calls pointing to other files; it simply lacks the required information.&lt;/p&gt;
&lt;p&gt;C and C++ folks had been fine with that approximation for decades, but in the recent decades they decided they'd had enough and started to provide an option to enable &lt;em&gt;link-time optimization&lt;/em&gt; (LTO). In this scheme the compiler produces optimized binaries from each file without looking at others, and then the linker actively looks at them all and tries to optimize the binary. It is much harder than working with (internally simplified) sources, and it hugely increases the compilation time, but it is worth trying if a smaller and/or faster executable is needed.&lt;/p&gt;
&lt;p&gt;So far we have talked about C and C++, but the LTO is much more beneficial for Rust. &lt;code&gt;Cargo.toml&lt;/code&gt; has an option to enable LTO:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[profile.release]&lt;/span&gt;
&lt;span class="na"&gt;lto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Did that work? Well, sort of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ls -al target/release/hello
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir 615725 May 31 20:17 target/release/hello*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It had a larger effect than the optimization level, but not much. Maybe it is time to look at the executable itself.&lt;/p&gt;
&lt;h2&gt;So what’s in my executable?&lt;/h2&gt;
&lt;p&gt;There are several tools for directly working with executables, but the most useful one is probably &lt;a href="https://www.gnu.org/software/binutils/"&gt;GNU binutils&lt;/a&gt;. It is available for all Unix-like systems and on Windows (&lt;a href="https://sourceforge.net/projects/mingw/files/MinGW/Base/binutils/"&gt;MinGW&lt;/a&gt; has a standalone install for example).&lt;/p&gt;
&lt;p&gt;There are many utilities in binutils, but &lt;code&gt;strings&lt;/code&gt; is probably the simplest. It simply crawls the binary to find a sequence of printable characters terminated by a zero byte, a typical representation of C string. Thus it tries to extract readable strings out of a binary, which is quite helpful for us. So let’s try that, and prepare for the scroll:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; strings target/release/hello &lt;span class="p"&gt;|&lt;/span&gt; head -n 10
&lt;span class="go"&gt;/lib64/ld-linux-x86-64.so.2&lt;/span&gt;
&lt;span class="go"&gt;bki^&lt;/span&gt;
&lt;span class="go"&gt; B ,&lt;/span&gt;
&lt;span class="go"&gt;libpthread.so.0&lt;/span&gt;
&lt;span class="go"&gt;_ITM_deregisterTMCloneTable&lt;/span&gt;
&lt;span class="go"&gt;_Jv_RegisterClasses&lt;/span&gt;
&lt;span class="go"&gt;_ITM_registerTMCloneTable&lt;/span&gt;
&lt;span class="go"&gt;write&lt;/span&gt;
&lt;span class="go"&gt;pthread_mutex_destroy&lt;/span&gt;
&lt;span class="go"&gt;pthread_self&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And, wow, it already has something we didn’t expect: pthreads. (More on that later, though.) There are indeed &lt;em&gt;tons&lt;/em&gt; of strings in our executable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; strings target/release/hello &lt;span class="p"&gt;|&lt;/span&gt; wc -c
&lt;span class="go"&gt;   94339&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Huh, one sixth of our executable is for strings we don’t really use! At the closer inspection, this observation is not correct as &lt;code&gt;strings&lt;/code&gt; also give many false positives, but there are some significant strings as well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Those starting with &lt;code&gt;jemalloc_&lt;/code&gt; and &lt;code&gt;je_&lt;/code&gt;. These are names from &lt;a href="http://www.canonware.com/jemalloc/"&gt;jemalloc&lt;/a&gt;, a high-performance memory allocator. That’s what Rust uses for the memory management, in place of classic &lt;code&gt;malloc&lt;/code&gt;/&lt;code&gt;free&lt;/code&gt;. It is not a small library, and we don’t do any dynamic allocation by ourselves anyway.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Those starting with &lt;code&gt;backtrace_&lt;/code&gt; and &lt;code&gt;DW_&lt;/code&gt;. These are yet more names from libbacktrace, a library to produce stack trace. Rust uses it to print a helpful backtrace on panic (available with &lt;code&gt;RUST_BACKTRACE=1&lt;/code&gt; environment). However, we don’t panic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Those starting with &lt;code&gt;_ZN&lt;/code&gt;. These are “mangled” names from Rust standard libraries.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why do we have those strings in the first place? They are debug symbols, which give an appropriate (possibly human-readable) name for the otherwise-machine-processed binary. Do you remember libbacktrace above? It needs those debug symbols to print any useful information. Yet, since we are really making a release build we may choose not to include them. Rust itself doesn't have this option, since they are typically stripped by an external utility called &lt;code&gt;strip&lt;/code&gt;.  So let’s look at what can be done about them.&lt;/p&gt;
&lt;h2&gt;Debug symbols, get off my lawn!&lt;/h2&gt;
&lt;p&gt;So we have three goals: no jemalloc, no libbacktrace, and no debug symbols. I’ve mentioned that &lt;code&gt;strip&lt;/code&gt; strips debug symbols, so let’s do that first. Note that &lt;code&gt;strip&lt;/code&gt; also comes with binutils, so you can just run that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; strip target/release/hello
&lt;span class="gp"&gt;$&lt;/span&gt; target/release/hello
&lt;span class="go"&gt;Hello, world!&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; ls -al target/release/hello
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir 347648 May 31 20:23 target/release/hello*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that IS smaller! About a half of the entire executable was for debugging symbols. Note that, having stripped our symbols, we cannot have a nice backtrace nor panic recovery:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sed -i.bak s/println/panic/ src/main.rs
&lt;span class="gp"&gt;$&lt;/span&gt; cat src/main.rs
&lt;span class="go"&gt;fn main() {&lt;/span&gt;
&lt;span class="go"&gt;    panic!(&amp;quot;Hello, world!&amp;quot;);&lt;/span&gt;
&lt;span class="go"&gt;}&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt; cargo build --release &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; strip target/release/hello
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nv"&gt;RUST_BACKTRACE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; target/release/hello
&lt;span class="go"&gt;thread &amp;#39;&amp;lt;main&amp;gt;&amp;#39; panicked at &amp;#39;Hello, world!&amp;#39;, src/main.rs:2&lt;/span&gt;
&lt;span class="go"&gt;stack backtrace:&lt;/span&gt;
&lt;span class="go"&gt;   1:     0x7fde451c1e41 - &amp;lt;unknown&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;Illegal instruction&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; mv src/main.rs.bak src/main.rs     &lt;span class="c1"&gt;# tidy up&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;…and it somehow aborted. Probably a libbacktrace issue, I don’t know, but that doesn’t harm much anyway.&lt;/p&gt;
&lt;h2&gt;Knocking jemalloc down&lt;/h2&gt;
&lt;p&gt;We have knocked debug symbols down, now let’s get rid of the remaining libraries. Some bad news: From this point on you are entering the realm of nightly Rust. This realm is not as scary as you might think, as it doesn't break in your face, but it may break in smaller ways (which is why we have nightlies!). That’s the major reason that we don’t yet have nightly features in stable– they may change. Fortunately, the features we are going to use have been quite stable and you can probably follow the remainder of this post with more recent nightlies. But for posteriority, I will stick to a particular nightly version.&lt;/p&gt;
&lt;p&gt;Some good news: Installing nightlies (either the latest or any specific version) is very simple with rustup.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; rustup override &lt;span class="nb"&gt;set&lt;/span&gt; nightly-2016-05-31
&lt;span class="gp"&gt;$&lt;/span&gt; cargo build --release
&lt;span class="gp"&gt;$&lt;/span&gt; ls -al target/release/hello
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir 620490 May 31 20:35 target/release/hello*&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; strip target/release/hello
&lt;span class="gp"&gt;$&lt;/span&gt; ls -al target/release/hello
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir 351520 May 31 20:35 target/release/hello*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay, the size hadn’t changed much since the last time we used &lt;code&gt;strip&lt;/code&gt;. Let’s knock jemalloc down first— it is well documented in &lt;a href="https://doc.rust-lang.org/book/custom-allocators.html"&gt;the Book&lt;/a&gt;, but the gist is that it just takes two additional lines to change an allocator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#![feature(alloc_system)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;crate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;alloc_system&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that makes quite a difference:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cargo build --release
&lt;span class="gp"&gt;$&lt;/span&gt; ls -al target/release/hello
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir 210364 May 31 20:39 target/release/hello*&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; strip target/release/hello
&lt;span class="gp"&gt;$&lt;/span&gt; ls -al target/release/hello
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir 121792 May 31 20:39 target/release/hello*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay! We are down from 600 whooping kilobytes to about 120 KB. Jemalloc indeed is a big library; it really has &lt;a href="http://www.canonware.com/download/jemalloc/jemalloc-latest/doc/jemalloc.html"&gt;tons of configuration&lt;/a&gt; so that you can fine-tune its performance, and that has to go somewhere.&lt;/p&gt;
&lt;h2&gt;No panic, no gain&lt;/h2&gt;
&lt;p&gt;We are now left with libbacktrace. Our code doesn't panic, so we don’t need to print a backtrace, right? Well, we have reached a limit: libbacktrace is deeply integrated into the standard library, and the only way to avoid it is to not use libstd. Quite a dead end.&lt;/p&gt;
&lt;p&gt;But that is not the end of story. Panicking gives us a backtrace, but also the ability to unwind anything. And unwinding is supported by yet another bit of code called libunwind. It turns out that we &lt;em&gt;can&lt;/em&gt; get rid of this by disabling unwinding. Put this into &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[profile.release]&lt;/span&gt;
&lt;span class="na"&gt;lto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;panic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;abort&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we can see some effect:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cargo build --release
&lt;span class="gp"&gt;$&lt;/span&gt; ls -al target/release/hello
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir 200131 May 31 20:44 target/release/hello*&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; strip target/release/hello
&lt;span class="gp"&gt;$&lt;/span&gt; ls -al target/release/hello
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir 113472 May 31 20:44 target/release/hello*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;And that’s it!&lt;/strong&gt; It is about the end of story if you don’t want to change the code.&lt;/p&gt;
&lt;h2&gt;Intermission: Linkage&lt;/h2&gt;
&lt;p&gt;Before looking at more obscure areas, this is perfect time to admit that I was cheating with the size of C and C++ binaries. The &lt;em&gt;fair&lt;/em&gt; (well, fair&lt;em&gt;er&lt;/em&gt;) comparison would be as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; touch *.c *.cpp
&lt;span class="gp"&gt;$&lt;/span&gt; make hello-c &lt;span class="nv"&gt;CFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-Os -flto -Wl,--gc-sections -static -s&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;cc -Os -flto -Wl,--gc-sections -static    hello-c.c   -o hello-c&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; make hello-cpp &lt;span class="nv"&gt;CXXFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-Os -flto -Wl,--gc-sections -static -static-libstdc++ -s&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;g++ -Os -flto -Wl,--gc-sections -static -static-libstdc++    hello-cpp.cpp   -o hello-cpp&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; ls -al hello-c hello-cpp
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir  758704 May 31 20:50 hello-c*&lt;/span&gt;
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir 1127784 May 31 20:50 hello-cpp*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Note: all these options are required to be in line with Rust equivalents. &lt;code&gt;-Wl,--gc-sections&lt;/code&gt; is probably the only option missing; it is a simple-minded cousin of LTO which does not optimize but just removes unused code sections—huge thanks to &lt;a href="https://www.reddit.com/r/rust/comments/4m7kha/rustlog_why_is_a_rust_executable_large/d3tb8v5"&gt;Alexis Beingessner and Corey Richardson&lt;/a&gt; for pointing out that it was missing. Rust has that implied by default, and it can be applied independently from LTO, so a fair comparison also needs that.)&lt;/p&gt;
&lt;p&gt;Also, the Rust binary needs to be rebuilt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cargo rustc --release -- -C link-args&lt;span class="o"&gt;=&lt;/span&gt;-static
&lt;span class="gp"&gt;$&lt;/span&gt; strip target/release/hello
&lt;span class="gp"&gt;$&lt;/span&gt; ls -al target/release/hello
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir 105216 May 31 20:51 target/release/hello*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay, so it seems that Rust was actually far, &lt;em&gt;far&lt;/em&gt; better than C and C++. But… why is it “fair”? Isn’t a 1 MB executable too much for such a simple program regardless of the language?&lt;/p&gt;
&lt;p&gt;A binary executable is not a simple data format. It is normally processed and often altered by an OS routine called a “dynamic linker” (not to be confused with the aforementioned “linker”). The use of a dynamic linker allows programs to &lt;em&gt;dynamically&lt;/em&gt; link to other (often common) libraries including the system ones, and until now we were implicitly linking to C and C++’s standard libraries—glibc and libstdc++ in this case! Rust does not (well, barely) make use of them however, so the entire comparison was unfair to Rust.&lt;/p&gt;
&lt;p&gt;This kind of &lt;strong&gt;dynamic linking&lt;/strong&gt; is a double-edged sword. It makes it trivial to update libraries used by multiple programs and in theory the total binary size should be reduced. There is a strong minority against dynamic linkage though, as it also makes it trivial to &lt;em&gt;break&lt;/em&gt; libraries (because the dynamic linker is not like Cargo, what a pity) and its effect on the total binary size have been exaggerated. To elaborate on the latter, earlier in this post I’ve mentioned a problem that the LTO eventually solves, and the dynamic linkage suffers from the same problem but without any solution—LTO on dynamic library would ruin its advantage.&lt;/p&gt;
&lt;p&gt;But in spite of those problems, dynamic linking remains a popular choice for many platforms and especially C and C++ standard libraries are often only available as a dynamic library. Yeah, we instructed the linker to statically link everything, but &lt;a href="https://stackoverflow.com/questions/8140439/why-would-it-be-impossible-to-fully-statically-link-an-application"&gt;glibc lies&lt;/a&gt; and some functions still require dynamic libraries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="c1"&gt;# restore debug symbols&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; touch *.c
&lt;span class="gp"&gt;$&lt;/span&gt; make hello-c &lt;span class="nv"&gt;CFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-Os -flto -static&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;cc -Os -flto -static    hello-c.c   -o hello-c&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; strings hello-c &lt;span class="p"&gt;|&lt;/span&gt; grep dlopen
&lt;span class="go"&gt;shared object cannot be dlopen()ed&lt;/span&gt;
&lt;span class="go"&gt;dlopen&lt;/span&gt;
&lt;span class="go"&gt;invalid mode for dlopen()&lt;/span&gt;
&lt;span class="go"&gt;do_dlopen&lt;/span&gt;
&lt;span class="go"&gt;sdlopen.o&lt;/span&gt;
&lt;span class="go"&gt;dlopen_doit&lt;/span&gt;
&lt;span class="go"&gt;__dlopen&lt;/span&gt;
&lt;span class="go"&gt;__libc_dlopen_mode&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is actually a clever way to make a near-static library with some dynamic-only features (iconv for example). Of course, if you depend on those features you are doomed. That aside, however, you need to enable static linking in the linker side to avoid biases; the &lt;code&gt;-static&lt;/code&gt; linker option is therefore necessary. It is very interesting to see that the Rust binary is actually &lt;em&gt;smaller&lt;/em&gt; after the static linking. It does depend on the C standard library but only on a little bit (standard I/O completely bypasses &lt;code&gt;stdio&lt;/code&gt;, for example), so it did manage to escape the weight of glibc somehow.&lt;/p&gt;
&lt;p&gt;The picture has changed so much that the comparison still looks biased. It is all the fault of glibc after all! There are several libc alternatives, and &lt;a href="https://www.musl-libc.org/"&gt;musl&lt;/a&gt; is a promising one. It results in very compact binary even after static linkage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; touch *.c
&lt;span class="gp"&gt;$&lt;/span&gt; make hello-c &lt;span class="nv"&gt;CFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-Os -flto -static -s&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;CC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;musl-gcc
&lt;span class="go"&gt;musl-gcc -Os -flto -static -s    hello-c.c   -o hello-c&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; ls -al hello-c
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir 5328 May 31 20:59 hello-c*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Can we use musl in Rust? Of course. You can install standard libraries for other targets with &lt;code&gt;rustup&lt;/code&gt;. This time &lt;code&gt;-C link-args=-static&lt;/code&gt; is not necessary as musl links statically by default.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; rustup target install x86_64-unknown-linux-musl
&lt;span class="gp"&gt;$&lt;/span&gt; cargo build --release --target&lt;span class="o"&gt;=&lt;/span&gt;x86_64-unknown-linux-musl
&lt;span class="gp"&gt;$&lt;/span&gt; ls -al target/x86_64-unknown-linux-musl/release/hello
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir 263743 May 31 21:07 target/x86_64-unknown-linux-musl/release/hello*&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; strip target/x86_64-unknown-linux-musl/release/hello
&lt;span class="gp"&gt;$&lt;/span&gt; ls -al target/x86_64-unknown-linux-musl/release/hello
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir 165448 May 31 21:07 target/x86_64-unknown-linux-musl/release/hello*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay, so this finally looks fair. The entirety of this 160 KB executable can be properly attributed to Rust’s “bloat”; it contains libbacktrace and libunwind (weighing about 50 KB combined), and libstd is still hard to completely optimize out (having 40 KB of pure Rust code, referencing various bits of libc). This is the status quo of the Rust standard library, and has to be worked out. Well, at least this is one time cost per executable, so practically they wouldn’t matter much anyway.&lt;/p&gt;
&lt;p&gt;There is yet another approach to being more fair. What if we can use dynamic linking for Rust? This completely ruins the distribution until every OS ships with the Rust standard library, but well, it's worth trying. Note that LTO, the custom allocator, and the different panic strategy are not compatible with dynamic linkage, so you have to leave them as the defaults.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cargo rustc --release -- -C prefer-dynamic
&lt;span class="gp"&gt;$&lt;/span&gt; ls -al target/release/hello
&lt;span class="go"&gt;-rwxrwxr-x 1 lifthrasiir 8831 May 31 21:10 target/release/hello*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So this is comparable to ordinary C/C++ programs with dynamic linkage. Mostly a curiosity in this case though.&lt;/p&gt;
&lt;h2&gt;Say goodbye to libstd&lt;/h2&gt;
&lt;p&gt;We have so far looked at reducing the executable size without changing your code a lot. But if you are willing to pay that cost, it may result in a much smaller executable. Note: This is &lt;em&gt;not&lt;/em&gt; recommended in general, this section is going to be a strict cost-effect analysis.&lt;/p&gt;
&lt;p&gt;We all know that libstd is friendly and convenient, but sometimes it is too much (and it is a source of libbacktrace and libunwind that we don’t really use). Start by avoiding libstd. The Book has a whole section about &lt;a href="https://doc.rust-lang.org/book/no-stdlib.html"&gt;no stdlib mode&lt;/a&gt;, so let’s follow that. The new source code is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#![feature(lang_items, start)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#![no_std]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;crate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;libc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[start]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_argc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;isize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_argv&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;isize&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// since we are passing a C string,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// the final null character is mandatory&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HELLO&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;&amp;#39;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, world!&lt;/span&gt;&lt;span class="se"&gt;\n\0&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;unsafe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;libc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HELLO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_ptr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[lang = &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;eh_personality&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eh_personality&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#[lang = &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;panic_fmt&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;panic_fmt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;loop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And you need to add a dependency to the &lt;code&gt;libc&lt;/code&gt; crate in &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[dependencies]&lt;/span&gt;
&lt;span class="na"&gt;libc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;{ version = &amp;quot;0.2&amp;quot;, default-features = false }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that’s it! It is very close to what you would get with a C program: 8503 bytes before &lt;code&gt;strip&lt;/code&gt;, 6288 bytes after &lt;code&gt;strip&lt;/code&gt;. (I’m tried of faking the console output (note the modified time), so I’ll omit them from now on.) musl goes further, but you need to give an additional option to properly link the &lt;code&gt;libc&lt;/code&gt; crate to musl:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;RUSTFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-L native=/usr/lib/x86_64-linux-musl&amp;#39;&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; cargo build --release --target&lt;span class="o"&gt;=&lt;/span&gt;x86_64-unknown-linux-musl
&lt;span class="gp"&gt;$&lt;/span&gt; strip target/x86_64-unknown-linux-musl/release/hello
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we are down to 5360 bytes. Only 32 bytes behind the best C program! How can we do better? Instead of using stdio, you can use the direct system call (on Unix only, of course):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#[start]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_argc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;isize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_argv&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;isize&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HELLO&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;&amp;#39;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, world!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;unsafe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;libc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;libc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;STDOUT_FILENO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;HELLO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_ptr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HELLO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This strips yet more bits off the binary and weighs 5072 bytes after &lt;code&gt;strip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One may argue that the above is not real Rust code, but a Rust-esque code depending on Unix system calls. Fine. No real Rust code would look like that. Instead we can make our own &lt;code&gt;Stdout&lt;/code&gt; type, wired directly to system calls, and use ordinary formatting macros:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Stdout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Stdout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;write_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;unsafe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;libc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;libc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;STDOUT_FILENO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_ptr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;isize&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[start]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_argc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;isize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_argv&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;isize&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;writeln&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is indeed much more natural Rust code. It weighs 9248 bytes after &lt;code&gt;strip&lt;/code&gt;, suggesting that the minimal formatting code costs about 4 KB. Other types impose more overhead though; printing &lt;code&gt;3.14f64&lt;/code&gt; for example costs about 25 KB of additional binary, as &lt;a href="https://github.com/rust-lang/rust/pull/24612"&gt;floating-to-decimal conversion is hard&lt;/a&gt;. Also mind that this never buffers (except for the internal kernel buffer for pipes).&lt;/p&gt;
&lt;h2&gt;And another thing...&lt;/h2&gt;
&lt;p&gt;We can go much further even from this point, since our executable still contains seemingly unused chunk of bytes. Welcome to the realm of actual low-level programming (in contrast to the &lt;em&gt;lower-level&lt;/em&gt; programming we normally do with C/C++). This area has been very thoroughly explored by pioneers however, so I will end the trip by linking to them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Keegan McAllister made a &lt;a href="http://mainisusuallyafunction.blogspot.kr/2015/01/151-byte-static-linux-binary-in-rust.html"&gt;151-byte x86-64 Linux program&lt;/a&gt; printing “Hello!”. Well, that’s not what we wanted, and the proper “Hello, world!” program will probably cost 165 bytes; the original program (ab)used the ELF header to put the string constant there but there isn't much space to put a longer “Hello, world!”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Peter Atashian made a &lt;a href="https://github.com/retep998/hello-rs/blob/master/windows/src/main.rs"&gt;1536-byte Windows program&lt;/a&gt; printing “Hello world!” (note no comma). I’m less sure about the size of the proper program, but yeah, you have an idea. This is notable because Windows essentially forces you to use dynamic linkage (Windows system calls are not stable across versions), and the dynamic symbol table costs bytes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For the comparison and your geeky pleasure, the shortest known version of a x86-64 Linux program printing “Hello, world” (note no exclamation mark) costs only &lt;a href="http://www.muppetlabs.com/~breadbox/software/tiny/hello.asm.txt"&gt;62 bytes&lt;/a&gt;. The general technique is better explained in &lt;a href="http://www.muppetlabs.com/~breadbox/software/tiny/teensy.html"&gt;this classical article&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hey, I’ve learned the hard way that we have tons of variations over the “Hello, world!” programs, and none of those programs print the proper and longest version of greeting!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="takeaway"&gt;&lt;/a&gt; This post is intended as a tour of various techniques (not necessarily all practical) of reducing program size, but if you demand some conclusion, the pragmatic takeaway is that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compile with &lt;code&gt;--release&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Before distribution, enable LTO and strip the binary.&lt;/li&gt;
&lt;li&gt;If your program is not memory-intensive, use the system allocator (assuming nightly).&lt;/li&gt;
&lt;li&gt;You may be able to use the optimization level &lt;code&gt;s&lt;/code&gt;/&lt;code&gt;z&lt;/code&gt; in the future as well.&lt;/li&gt;
&lt;li&gt;I didn’t mention this because it doesn’t improve such a small program, but you can also try &lt;a href="http://upx.sourceforge.net/"&gt;UPX&lt;/a&gt; and other executable compressors if you are working with a much larger application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s all, folks!&lt;/p&gt;</summary></entry><entry><title>Worklog 2015-03-06</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2015-03-06.html" rel="alternate"></link><published>2015-03-06T03:23:00+09:00</published><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2015-03-06:rustlog/worklog-2015-03-06.html</id><summary type="html">&lt;p&gt;I have recently pushed three pull requests into Rust:
&lt;a href="https://github.com/rust-lang/rust/pull/22839"&gt;#22839&lt;/a&gt;, &lt;a href="https://github.com/rust-lang/rust/pull/22971"&gt;#22971&lt;/a&gt; and &lt;a href="https://github.com/rust-lang/rust/pull/23060"&gt;#23060&lt;/a&gt;.
Each has its own significance,
but today I'll discuss about last two PRs
primarily because they strictly remove lots of redundant data
from the Rust distribution.&lt;/p&gt;
&lt;h2&gt;Anatomy of Rust Distribution&lt;/h2&gt;
&lt;p&gt;Let's look at &lt;a href="http://static.rust-lang.org/dist/2015-03-03/rust-nightly-x86_64-unknown-linux-gnu.tar.gz"&gt;2015-03-03 nightly&lt;/a&gt;,
which is the last nightly not affected by two PRs.
It is 144.8 MB after gzipped
(Note: this is 144.8 times 10&lt;sup&gt;6&lt;/sup&gt; bytes, to be exact),
and 634.5 MB before compression.
More precisely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rustc&lt;/code&gt; directory contains a main Rust distribution, and
  is 296.3 MB and 101.8 MB before and after compression.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Non-library files have negligible size (less than a megabyte).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We ship at most &lt;em&gt;three&lt;/em&gt; copies of files per crate:
Shared libraries from snapshot compiler,
shared libraries for the compiled Rust executable,
and optionally static counterparts of them.&lt;/p&gt;
&lt;p&gt;We can omit static libraries from the distribution.
This completely removes the ability to statically link,
but this would remove 48.1 MB and 11.3 MB of binary
before and after compression.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://lifthrasiir.github.io/rustlog/worklog-2014-12-06.html"&gt;As previously mentioned&lt;/a&gt;, metadata takes much space.
Some of them are compressed with gzip and
actually does not compress well in the tarball.
Some of them, prominently in static libraries, are not compressed
so that they can be conveniently &lt;code&gt;mmap&lt;/code&gt;ped.&lt;/p&gt;
&lt;p&gt;Static libraries have 93.4 MB of uncompressed metadata.
Shared libraries have 32.7 MB of compressed metadata.
Assuming that they have same compression ratio as the overall directory
(and that already compressed metadata do not compress at all),
they will take about 65 MB in the gzipped tarball.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rust-docs&lt;/code&gt; directory contains generated HTML documentation
  (which includes compiler crates, as in &lt;code&gt;make compiler-docs&lt;/code&gt;) and
  is 313.3 MB and 40.0 MB before and after compression.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are particularly large crates:
&lt;code&gt;rustc&lt;/code&gt;, &lt;code&gt;rustc_trans&lt;/code&gt;, &lt;code&gt;std&lt;/code&gt;, &lt;code&gt;rustc_typeck&lt;/code&gt; and &lt;code&gt;rustc_lint&lt;/code&gt; crates
take 218.6 MB and 30.6 MB before and after compression.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we actually try to remove compiler crates,
that will remove at least 204.6 MB and 29.4 MB before and compression.
Why "at least"? That will also remove files from other directories,
but that's cumbersome to quantify.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The HTML documentation also essentially reproduces
a public portion of each crate's source code,
which takes 23.8 MB and 5.4 MB before and after compression.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cargo&lt;/code&gt; directory contains (of course) Cargo, and
  is 8.9 MB and 3.4 MB before and after compression.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ways to Enlightenment (or sorta)&lt;/h2&gt;
&lt;p&gt;There are several ways to shrink the tarball.&lt;/p&gt;
&lt;p&gt;First, we observe that the docs are technically
same contents as the shipped libraries.
That would mean, if possible,
generating docs from the compiled library on the fly
will completely remove docs from the distribution!
&lt;a href="https://github.com/rust-lang/rust/pull/19606"&gt;#19606&lt;/a&gt; was my initial attempt to do that,
but it had several obstacles I wasn't able to tackle on time.&lt;/p&gt;
&lt;p&gt;There are some alternative solutions with docs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Move everything to JavaScript with an optimized format.
   The "HTML" documentation will actually be
   a huge web application that renders the page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a variation of 1, make it a Rust web server.
   If we don't care about bundling &lt;a href="https://github.com/hyperium/hyper"&gt;Hyper&lt;/a&gt; with Rust, why not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove compiler docs and keep others as is.
   This might be a good trade-off as
   many end users won't bother looking at them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove source codes from the docs. (&lt;a href="https://github.com/rust-lang/rust/issues/23061"&gt;#23601&lt;/a&gt;)
   We already have a separate tarball for source codes,
   so let users download them if they really want.
   Of course, this alone won't make much effect.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Second, we can shrink the metadata.
The metadata was based on the &lt;a href="http://ebml.sourceforge.net/specs/"&gt;EBML&lt;/a&gt;
but we had very, very different use cases compared to Matroska:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We don't have lots of tags.
  EBML tags are quite general (and tuned) because
  each tag essentially is a unique identifier
  and there can be lots of them in one file.
  Rust metadata is different:
  we have about one hundred or so specialized tags and
  some dozens for auto-serialized AST.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We don't have a proper schema.
  As mentioned above, auto-serialized AST is
  almost incomprehensible without the exact knowledge of data structure.
  Still, somehow, we can navigate through that.
  There are primarily two classes of serialization formats,
  schematic (like protobuf) and schemaless (like JSON),
  and &lt;em&gt;our use case is neither of them&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We don't perform relaxation.
  That is, we don't encode the length optimally,
  as we generally don't know the length of the following data in advance.
  This is also a big limitation of EBML:
  it does not have an indefinitely-sized container.
  Moreover, we occasionally refer to other portion of encoded metadata
  by a simple byte offset.
  This makes the proper relaxation quite hard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EBML itself does not define an encoding for primitive values
  (not uncommon with schematic serialization formats),
  and our ad-hoc encoding for them is very inefficient.
  For example, we have used 4 bytes for values
  that occur some hundred thousand times and is less than 100.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main direction on metadata would be
either ditching EBML or incrementally improving that.
This was a subject of &lt;a href="https://github.com/rust-lang/rust/issues/2743"&gt;2.5 year old bug&lt;/a&gt;,
and I always had an eye on that.&lt;/p&gt;
&lt;p&gt;Third, we can have only one copy of metadata per crate.
This calls for two main prerequisites:
rustc should be stable enough that
we can combine rustc libraries and user code libraries, and
rustc should have a knowledge of external metadata,
which would look similar to Windows &lt;a href="https://en.wikipedia.org/wiki/Program_database"&gt;PDB file&lt;/a&gt;.
That'd be a huge undertaking though.&lt;/p&gt;
&lt;p&gt;Lastly, we can simply switch to something better than gzip.
Gzip is very old algorithm: it relies on
two-score-old modelling algorithm—&lt;a href="https://en.wikipedia.org/wiki/LZ77_and_LZ78"&gt;LZ77&lt;/a&gt;—and
suboptimal coding algorithm—skewed &lt;a href="https://en.wikipedia.org/wiki/Huffman_coding"&gt;Huffman tree&lt;/a&gt;.
Its use of LZ77 is also suboptimal,
as the matching window is limited in 64 KB and
anything beyond that won't be deduplicated.
The existing suggestion was to use &lt;a href="http://tukaani.org/xz/"&gt;xz&lt;/a&gt; for tarballs (&lt;a href="https://github.com/rust-lang/rust/issues/21724"&gt;#21724&lt;/a&gt;)
and Snappy or LZ4 for metadata (&lt;a href="https://github.com/rust-lang/rust/issues/6902"&gt;#6902&lt;/a&gt;).
They should use different algorithms as
metadata should decompress quickly.&lt;/p&gt;
&lt;h2&gt;Achievements&lt;/h2&gt;
&lt;p&gt;So what have I done? Warning: Bragging follows.&lt;/p&gt;
&lt;p&gt;The first PR, &lt;a href="https://github.com/rust-lang/rust/pull/22971"&gt;#22971&lt;/a&gt;, changes the metadata encoding
to greatly reduce the inherent overhead of EBML.
(In fact, it is now completely different from EBML!)
I kept somewhat debatable nature of navigable serialization format,
which needs schema for complete decoding
but is enough self-structured that can be inspected without much effort.
@eddyb told me that he really wants to get rid of that nature,
and I guess the future PRs would address that.&lt;/p&gt;
&lt;p&gt;The second PR, &lt;a href="https://github.com/rust-lang/rust/pull/23060"&gt;#23060&lt;/a&gt;, is very cost-effective one.
We all know that compiler crates are large,
but it becomes suspicious when
docs for librustc are four times larger than those for libstd
while libstd actually has more code than librustc (!).
This ultimately traced to the quadratic growth of sidebars:
When the module contains N items,
there would be N sidebars with N items each.
librustc had a large LLVM binding module, which caused a huge bloat.
The solution was to move them into a shared JavaScript file per module.&lt;/p&gt;
&lt;p&gt;Was that effective? I think so.
In fact, if my measurement is correct,
the updated tarball should be &lt;strong&gt;35 MB&lt;/strong&gt; smaller than the original,
and the uncompressed size should be halved.
Note that at the time of writing,
the first PR has been already deployed
and that resulted in universal 10 MB decrease in size.
I too was surprised at the numbers,
as my initial goal was just to reduce some 30% of metadata.
Actually I was able to reduce 30% of &lt;em&gt;entire&lt;/em&gt; tarball. Great.&lt;/p&gt;
&lt;p&gt;There are still many possible improvements on the distribution size.
I welcome any suggestion, concrete proposal or implementation;
I hope this post to motivate anyone interested in this task.&lt;/p&gt;</summary></entry><entry><title>Worklog 2015-02-19</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2015-02-19.html" rel="alternate"></link><published>2015-02-19T23:12:00+09:00</published><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2015-02-19:rustlog/worklog-2015-02-19.html</id><summary type="html">&lt;p&gt;Long time no see.
My daily job and other various distractions
prevented me from doing a continuous work like blogging.
Well, I finally finished &lt;a href="https://github.com/lifthrasiir/rust-chrono/blob/0.2/CHANGELOG.md#020-2015-02-19"&gt;Chrono 0.2&lt;/a&gt; up
so I have something to write down now.&lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://lifthrasiir.github.io/rustlog/worklog-2015-01-13.html"&gt;previous post&lt;/a&gt; about Chrono,
I discussed about a new time zone and offset handling of Chrono 0.2.
This alone is a big change,
but another big change in Chrono 0.2 is
a new formatting and parsing API.
Chrono 0.1 already had a rudimentary formatting API via &lt;code&gt;format&lt;/code&gt; method,
but it didn't have a parsing API
which was another pain point besides from local date/time handling.&lt;/p&gt;
&lt;p&gt;Chrono 0.2 has three different pieces of new APIs
redesigned for formatting and parsing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Formatting syntax representation ("items") and parsing&lt;/li&gt;
&lt;li&gt;Formatting with items&lt;/li&gt;
&lt;li&gt;Parsing with items&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Altogether they form an advanced formatting facility in Chrono 0.2.
I'll try to briefly discuss their designs and justifications.&lt;/p&gt;
&lt;h2&gt;Formatting Items&lt;/h2&gt;
&lt;p&gt;In Chrono, a formatting item is a unit of formatting or parsing.
For example a &lt;code&gt;strftime&lt;/code&gt;-like format string &lt;code&gt;%Y-%m-%d&lt;/code&gt; has
five different formatting items:
&lt;code&gt;%Y&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;%m&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;%d&lt;/code&gt;.
Chrono decouples a formatting syntax from
the actual meaning of formatting items,
so they have the following (somewhat verbose) internal representations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pad&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pad&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pad&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This decoupling allows Chrono
to support multiple formatting syntax,
such as &lt;code&gt;YYYY-MM-DD&lt;/code&gt; or &lt;a href="http://fuckinggodateformat.com/"&gt;Go-like &lt;code&gt;2006-01-02&lt;/code&gt;&lt;/a&gt; instead.
Also, Chrono can have "hidden" formatting items
that can be used for internal purposes.
RFC 2822 and 3339 support is implemented in this way.&lt;/p&gt;
&lt;p&gt;The formatting item is a good abstraction,
but every abstraction comes with a complexity.
In the case of Chrono
the complexity arises from the desire to avoid allocation.
The number of formatting items is
proportional to the length of format string
in the worst case,
so we cannot blindly collect items into a collection.
Instead, Chrono returns an &lt;code&gt;Iterator&lt;/code&gt; of formatting items
and directly consumes that iterator
for printing the date and time.
Therefore the following identity holds:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StrftimeItems&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%Y-%m-%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;::&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pad&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pad&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pad&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;)]);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I believe this redesign has a maximal flexibility
while retaining an ability to avoid &lt;code&gt;std&lt;/code&gt; at all.&lt;/p&gt;
&lt;h2&gt;Formatting with Items&lt;/h2&gt;
&lt;p&gt;Formatting with items is done with a new &lt;code&gt;format_with_items&lt;/code&gt; method.
The original &lt;code&gt;format&lt;/code&gt; method is now a thin wrapper over that.&lt;/p&gt;
&lt;p&gt;This part of Chrono remains relatively unchanged,
but there are some notable small changes
which deserve the explanation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The original &lt;code&gt;format&lt;/code&gt; had a bug with leap seconds:
  Instead of printing &lt;code&gt;23:59:60.234567890&lt;/code&gt;,
  it would print &lt;code&gt;23:59:59.1234567890&lt;/code&gt;.
  It originates from Chrono's unique handling of leap seconds,
  and has been fixed in Chrono 0.2.&lt;/li&gt;
&lt;li&gt;There are &lt;code&gt;Numeric::Nanosecond&lt;/code&gt; and &lt;code&gt;Fixed::Nanosecond&lt;/code&gt;.
  The former corresponds to &lt;code&gt;strftime&lt;/code&gt;'s &lt;code&gt;%f&lt;/code&gt; specifier
  and was present since Chrono 0.1.
  The latter is a new formatting item
  which may print nothing, &lt;code&gt;.###&lt;/code&gt;, &lt;code&gt;.######&lt;/code&gt; or &lt;code&gt;.#########&lt;/code&gt;
  depending on the available accuracy.
  (An empty string is for the whole number of seconds.)
  This "adaptive" version turned out to be
  much more useful for parsing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Numeric::Timestamp&lt;/code&gt; (&lt;code&gt;%s&lt;/code&gt;) is now supported.
  It was delayed due to the proper local date/time handling.&lt;/li&gt;
&lt;li&gt;While this change is quite subtle,
  &lt;code&gt;Numeric::Year&lt;/code&gt; (&lt;code&gt;%Y&lt;/code&gt;) and &lt;code&gt;Numeric::IsoYear&lt;/code&gt; (&lt;code&gt;%G&lt;/code&gt;)
  now has an explicit sign for years not between 1 BCE and 9999 CE.
  It is a necessity from bijective parsing,
  which means that once printed,
  any valid date and time can be parsed into the original value.
  This particular scheme is adopted from ISO 8601:2004,
  so this is not really Chrono's own invention.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Parsing with Items&lt;/h2&gt;
&lt;p&gt;Okay, this is a fun part.
Basically Chrono 0.2 has the following parsing algorithm:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A fixed string parses as is:
   It has to appear in the input string as is.&lt;/li&gt;
&lt;li&gt;A sequence of one or more whitespace consumes
   &lt;em&gt;zero&lt;/em&gt; or more whitespace.&lt;/li&gt;
&lt;li&gt;Most numeric items (&lt;code&gt;Numeric::*&lt;/code&gt;) have
   a predefined &lt;strong&gt;parsing width&lt;/strong&gt;,
   the maximal number of digits that can be consumed.
   They consume zero or more whitespace
   followed by one or more but limited number of digits.
   The exception is made to &lt;code&gt;Numeric::Year&lt;/code&gt; and &lt;code&gt;Numeric::IsoYear&lt;/code&gt;,
   which may accept an arbitrary number of digits
   when preceded by a sign.&lt;/li&gt;
&lt;li&gt;Fixed items (&lt;code&gt;Fixed::*&lt;/code&gt;) have their own parsing logics,
   but normally does not consume preceding whitespace.
   They also normally ignore cases.&lt;/li&gt;
&lt;li&gt;At the end of the formatting items,
   the whole input string should have been consumed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is modelled after &lt;code&gt;strptime&lt;/code&gt;'s parsing algorithm,
which seems to handle lots of corner cases.
This allows a lax input like &lt;code&gt;2014-2-6&lt;/code&gt;
for a format string &lt;code&gt;%Y-%m-%d&lt;/code&gt;.
The fixed parsing width allows a format string like &lt;code&gt;%Y%m%d&lt;/code&gt;
which would accept strings like &lt;code&gt;20140206&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Parsing is daunting work,
implemented with two rather big modules (&lt;code&gt;chrono::format::{parse,scan}&lt;/code&gt;),
but it's actually an easy part.
Parsing only yields different date/time parts,
which has to be merged into actual values via the &lt;strong&gt;resolution algorithm&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As an easy example, consider RFC 2822.
&lt;a href="https://tools.ietf.org/html/rfc2822#section-3.3"&gt;RFC 2822 date and time format&lt;/a&gt; has a day of week part,
which should be consistent to other date parts when specified.
But &lt;code&gt;strptime&lt;/code&gt;-based parse would happily accept inconsistent input:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Wed, 31 Dec 2014 04:26:40 +0000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="s1"&gt;&amp;#39;%a, &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; %b %Y %H:%M:%S +0000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;struct_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tm_year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_mon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_mday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;tm_hour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_sec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;tm_wday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_yday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;365&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_isdst&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Thu, 31 Dec 2014 04:26:40 +0000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="s1"&gt;&amp;#39;%a, &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; %b %Y %H:%M:%S +0000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;struct_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tm_year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_mon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_mday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;tm_hour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_sec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;tm_wday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_yday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;365&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_isdst&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Resolving date/time parts is littered with lots of corner cases,
and that's why common date/time parsers do not correctly implement it;
as far as I know,
glibc, Python and JodaTime completely ignores the resolution.
Therefore I'm glad to announce that
&lt;strong&gt;Chrono 0.2 has a complete and known-to-be-correct resolution algorithm&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Chrono has a dedicated date/time part storage called &lt;code&gt;Parsed&lt;/code&gt;.
The resolution algorithm is hard to describe as is,
but the relevant &lt;a href="https://github.com/lifthrasiir/rust-chrono/blob/master/src/format/parsed.rs"&gt;source code&lt;/a&gt; is relatively well-commented
and worth reading if you are interested in the algorithm.&lt;/p&gt;
&lt;h2&gt;Chrono 0.3?&lt;/h2&gt;
&lt;p&gt;Maybe this might be an early assumption,
but Chrono 0.2 is intended to be a stable base of
the future API evolution.
The very main design decision was already in 0.1,
but 0.2 completes and fixes the biggest problem with 0.1.&lt;/p&gt;
&lt;p&gt;There are &lt;a href="https://github.com/lifthrasiir/rust-chrono/issues"&gt;some issues&lt;/a&gt; I've thought about 0.3.
Some of them will be definitely implemented in 0.3 (e.g. tzfile support),
some others are somewhat illusive (e.g. additional format syntax).
But these issues do not replace the users' feedback.
Personally I'd like to thank /u/savage884,
who brought the problem of local date handling in the &lt;a href="https://www.reddit.com/r/rust/comments/2w825v/local_times_in_chrono/"&gt;/r/rust post&lt;/a&gt;.
This post crucially helped me finishing the work and releasing 0.2.
I wish others give a feedback for Chrono like that,
so Chrono doesn't remain an library "considered annoying but designed so",
which situation I really don't like.&lt;/p&gt;</summary></entry><entry><title>Summary of Korean Rust Meetup #4</title><link href="https://lifthrasiir.github.io/rustlog/summary-of-korean-rust-meetup-4.html" rel="alternate"></link><published>2015-01-20T11:17:00+09:00</published><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2015-01-20:rustlog/summary-of-korean-rust-meetup-4.html</id><summary type="html">&lt;p&gt;As I've &lt;a href="worklog-2015-01-17.html"&gt;promised&lt;/a&gt; before,
this is a summary of the 4th Korean Rust Meetup
hosted by &lt;a href="http://rust-kr.org/"&gt;Korean Rust User Group&lt;/a&gt;,
where people concentrate on getting things done
no matter they are working on (libraries, Rust PRs and so on).&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="https://github.com/klutzy"&gt;@klutzy&lt;/a&gt; was repairing
&lt;a href="https://github.com/klutzy/suruga"&gt;suruga&lt;/a&gt;'s experimental X.509 parser.
There was some work on the certificate verification for a while,
but recent macro reforms broke them a lot.
Taking this as an opportunity to fully develop the parser,
the development branch of suruga now got
at least one kind of extensions working.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/kroisse"&gt;@kroisse&lt;/a&gt; worked on
the &lt;a href="https://github.com/earthreader/rust-earth"&gt;Rust port&lt;/a&gt; of
&lt;a href="http://libearth.earthreader.org/"&gt;libearth&lt;/a&gt;,
a supporting library for the &lt;a href="http://earthreader.org/"&gt;Earth Reader&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I (&lt;a href="https://github.com/lifthrasiir"&gt;@lifthrasiir&lt;/a&gt;) added
a &lt;a href="https://github.com/rust-lang/rust/pull/21304"&gt;new testing script for Rustdoc outputs&lt;/a&gt;.
Actually I wasn't able to send a pull request in time
(the PR was sent hours after the meetup),
as I accidentally omitted &lt;code&gt;NO_REBUILD=1&lt;/code&gt; and wasted some hours. :S&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/sanxiyn"&gt;@sanxiyn&lt;/a&gt; got
a &lt;a href="https://github.com/rust-lang/rust/pull/21323"&gt;basic infrastructure for code completion&lt;/a&gt;.
At the moment it is able to produce
a set of possible field names at given file position.
This will tremendously help the development of IDEs for Rust.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/simnalamburt"&gt;@simnalamburt&lt;/a&gt; worked on
&lt;a href="https://github.com/simnalamburt/obj-rs"&gt;obj-rs&lt;/a&gt;
which parses Wavefront &lt;code&gt;.obj&lt;/code&gt; file.
We already have &lt;a href="https://crates.io/search?q=obj"&gt;some existing parsers&lt;/a&gt;,
but I've been told that
other parsers cannot handle files produced by proprietary softwares,
such as 3ds Max, so their uses are somewhat limited.
It will help many professional game developers I guess.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There were also some interested people who are simply willing to learn Rust.
This is partly because the meetup was co-located with other meetups
(such as &lt;a href="https://ko-kr.facebook.com/pyjog"&gt;PyJog&lt;/a&gt;).
Having 1.0.0 alpha surely was good for them!
I'm looking forward to the next meetup,
which would likely be on the next month (February 2015).&lt;/p&gt;</summary></entry><entry><title>Worklog 2015-01-17</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2015-01-17.html" rel="alternate"></link><published>2015-01-18T03:58:00+09:00</published><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2015-01-18:rustlog/worklog-2015-01-17.html</id><summary type="html">&lt;p&gt;In the case you don't know,
there are a number of Korean people interested in and working with Rust.
Consequently, the emergence of &lt;a href="http://rust-kr.org/"&gt;Korean Rust User Group&lt;/a&gt;
should be evident.
It organizes a soon-to-be-monthly series of loose meetups,
where people concentrate on getting things done
no matter they are working on (libraries, Rust PRs and so on).&lt;/p&gt;
&lt;p&gt;Today we had the fourth meetup (the previous one was on 2014-12-20),
and as an advertisement (haha)
I'm going to post a short summary of
things that actually have been done in that meetup soon.
For &lt;em&gt;this&lt;/em&gt; worklog, I'm going to discuss my newest PR, &lt;a href="https://github.com/rust-lang/rust/pull/21304"&gt;#21304&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Rustdoc Testing&lt;/h2&gt;
&lt;p&gt;It is relatively well known that
Rustdoc is one of the most under-tested components in the entire tree.
That is partly because
we are dealing with the HTML output
(the write-only language&lt;sup&gt;TM&lt;/sup&gt; since circa 2004)
which is often hard to test without manual intervention.
Having fixed several Rustdoc issues in the past,
I naturally wanted to get the regression test for Rustdoc
but was surprised that there are only handful number of actual tests.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rust/pull/21304"&gt;#21304&lt;/a&gt; is my attempt to resolve this issue.
It adds a moderately-sized Python script
for matching against given portion of the HTML file.
Hopefully (note the caveats listed below),
it will make writing Rustdoc tests easier
since the code and verification data are integrated.
For example, the &lt;code&gt;run-make/rustdoc-where&lt;/code&gt; test uses
this verification script
to check if the &lt;code&gt;where&lt;/code&gt; clause is present in the output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep &lt;span class="s2"&gt;&amp;quot;Alpha.*where.*A:.*MyTrait&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$DOC&lt;/span&gt;/struct.Alpha.html &amp;gt; /dev/null
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Alpha&amp;quot;&lt;/span&gt;
grep &lt;span class="s2"&gt;&amp;quot;Bravo.*where.*B:.*MyTrait&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$DOC&lt;/span&gt;/trait.Bravo.html &amp;gt; /dev/null
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bravo&amp;quot;&lt;/span&gt;
grep &lt;span class="s2"&gt;&amp;quot;charlie.*where.*C:.*MyTrait&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$DOC&lt;/span&gt;/fn.charlie.html &amp;gt; /dev/null
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Charlie&amp;quot;&lt;/span&gt;
grep &lt;span class="s2"&gt;&amp;quot;impl.*Delta.*where.*D:.*MyTrait&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$DOC&lt;/span&gt;/struct.Delta.html &amp;gt; /dev/null
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Delta&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# and so on&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This chunk of code is separate from
the actual source code being compiled.
With this PR, the following Rust code
can also be used to verify its Rustdoc output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// @matches foo/struct.Alpha.html &amp;#39;//pre&amp;#39; &amp;quot;Alpha.*where.*A:.*MyTrait&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Alpha&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyTrait&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// @matches foo/trait.Bravo.html &amp;#39;//pre&amp;#39; &amp;quot;Bravo.*where.*B:.*MyTrait&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bravo&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyTrait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// @matches foo/fn.charlie.html &amp;#39;//pre&amp;#39; &amp;quot;charlie.*where.*C:.*MyTrait&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;charlie&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyTrait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Delta&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// @matches foo/struct.Delta.html &amp;#39;//*[@class=&amp;quot;impl&amp;quot;]//code&amp;#39; &amp;quot;impl.*Delta.*where.*D:.*MyTrait&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Delta&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyTrait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// and so on&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This actually constrains the portion of HTML to look at,
so we can avoid some kinds of false positives.
The cons is XPath, but that's the best we can achieve
without introducing any non-standard Python dependencies.
(Yes, Python has a built-in XPath implementation, slightly flawed.)
Any suggestion in this area is welcomed.&lt;/p&gt;
&lt;p&gt;I have some plans to do after this PR gets accepted.
The first is, of course, turning Rustdoc tests into a new kind of tests.
This will make writing Rustdoc tests more easier
(add one file and done)
so the Rustdoc fixes would get proper regression tests.
I expect that we will need tons of &lt;code&gt;A-needstest&lt;/code&gt; after this change.&lt;/p&gt;
&lt;p&gt;The second is a built-in link checker and other analyses.
I already worked on &lt;a href="https://github.com/rust-lang/rust/issues/15309"&gt;#15309&lt;/a&gt;,
and summarized the status of internal links in the generated docs,
but frankly this should be done automatically.
&lt;a href="https://www.reddit.com/r/rust/comments/2s0e9x/dead_links_in_documentation/"&gt;XMPPwocky has demonstrated the usefulness of link checker&lt;/a&gt;,
but his checker uses &lt;code&gt;html5ever&lt;/code&gt;
which is too large to integrate into the main tree.
If we can get a reasonable performance with a link checker in Python,
it would be great.
(The link checker based on &lt;code&gt;html5ever&lt;/code&gt; might be useful for
&lt;a href="https://github.com/rust-lang/rust/issues/20827"&gt;bigger testing infrastructure&lt;/a&gt;, though.)&lt;/p&gt;
&lt;p&gt;Oh, and as aside I should really resume working on &lt;a href="https://github.com/rust-lang/rust/pull/19606"&gt;#19606&lt;/a&gt;...&lt;/p&gt;</summary></entry><entry><title>Worklog 2015-01-14</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2015-01-14.html" rel="alternate"></link><published>2015-01-15T02:17:00+09:00</published><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2015-01-15:rustlog/worklog-2015-01-14.html</id><summary type="html">&lt;p&gt;A day for smaller works. :)&lt;/p&gt;
&lt;p&gt;I've updated the horribly outdated &lt;a href="http://cosmic.mearie.org/2014/01/periodic-table-of-rust-types/"&gt;Periodic Table&lt;/a&gt; of Rust Types.
The resulting table seems a lot clearer than the previous.
I've also received a series of suggestions and
reports of mistakes (oops) from /r/rust.&lt;/p&gt;
&lt;p&gt;I've also pushed a &lt;a href="https://github.com/lifthrasiir/rust-maybe_utf8"&gt;MaybeUTF8&lt;/a&gt; library.
This was originally a part of &lt;a href="https://github.com/lifthrasiir/rust-zip"&gt;rust-zip&lt;/a&gt; library,
but this is slightly undermaintained than &lt;a href="https://github.com/mvdnes/zip-rs"&gt;zip-rs&lt;/a&gt;,
and I basically kept it just compilable in the recent nightly.
In the long term I plan to merge some design of rust-zip into zip-rs,
and as a preparation I've separated this into a separate crate.
&lt;code&gt;MaybeUTF8&lt;/code&gt; was what newer nightlies liked to break, anyway.&lt;/p&gt;</summary></entry><entry><title>Worklog 2015-01-13</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2015-01-13.html" rel="alternate"></link><published>2015-01-14T02:19:00+09:00</published><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2015-01-14:rustlog/worklog-2015-01-13.html</id><summary type="html">&lt;p&gt;I've finally got the initial design of &lt;a href="https://github.com/lifthrasiir/rust-chrono/tree/0.2/"&gt;Chrono 0.2&lt;/a&gt; working.
It took so much time, partially because
I'm working on dozens of other projects including Rust libraries.
It solves one of the major annoyance with Chrono,
so I'm glad that this new design is promising.&lt;/p&gt;
&lt;h2&gt;Time zones in Chrono 0.1&lt;/h2&gt;
&lt;p&gt;As always, I start by pointing to
&lt;a href="http://naggum.no/lugm-time.html"&gt;Erik Naggum's excellent essay about date and time&lt;/a&gt;.
(Yes, I'm terrible at story telling and I won't say a lot about that.)
Most importantly, the core aspect of time zone is that
it is ultimately a political creation rather than a natural necessity.
This complicates lots of things,
though Author David Olson and others have done
a &lt;a href="https://www.iana.org/time-zones"&gt;tremendously important work&lt;/a&gt; in this regard.&lt;/p&gt;
&lt;p&gt;There are several problems with time zones:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There is no reliable way to handle the local date in the future.&lt;/li&gt;
&lt;li&gt;There can exist a local date which occurred in two or more instants.&lt;/li&gt;
&lt;li&gt;There can exist a local date which never has been occurred.&lt;/li&gt;
&lt;li&gt;The conversion process itself is seriously annoying
   and easy to make a mistake.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(If you are interested in the timekeeping,
you'll realize that this list equally applies to leap seconds.
I had to deal with them in Chrono as well,
and chose to make them invisible to the normal usage.)&lt;/p&gt;
&lt;p&gt;In fact, Chrono's original &lt;code&gt;Offset&lt;/code&gt; design
does explicitly account for these problems.
In Chrono, the local date is a concept
only meaningful to accessors and formatting routines,
eliminating the very source of 1.
The possibility of 2 and 3 is handled via the &lt;code&gt;LocalResult&lt;/code&gt; enum,
while 4 is handled via... delegating &lt;em&gt;everything&lt;/em&gt; to the &lt;code&gt;Offset&lt;/code&gt;.
This decision is partly because
we would only have a handful number of &lt;code&gt;Offset&lt;/code&gt; implementations,
so we have to implement them anyway.
In the end, we had something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Clone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Show&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;local_minus_utc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from_local_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveDate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LocalResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from_local_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LocalResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from_local_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveDateTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LocalResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to_local_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveDate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NaiveDate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to_local_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NaiveTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to_local_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveDateTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NaiveDateTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ymd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// other constructors follow&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Off&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NaiveDateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Off&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Date and Time follows&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This sounds good.
You can put the offset data into the timezone-aware &lt;code&gt;DateTime&lt;/code&gt;,
and use it to convert to the local date (&lt;code&gt;to_local_date&lt;/code&gt;).
In the converse, &lt;code&gt;DateTime&lt;/code&gt; has to be created from &lt;code&gt;Offset&lt;/code&gt;
so that it converts to the internal representation in UTC
(&lt;code&gt;from_local_date&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;But you might wonder:
why is &lt;code&gt;local_minus_utc&lt;/code&gt; separate from &lt;code&gt;to_local_datetime&lt;/code&gt;?
The latter can be implemented via the former, right?
Yes! In the current implementation the latter is redundant.
And this redundancy suggests a bigger problem.&lt;/p&gt;
&lt;p&gt;Originally, &lt;code&gt;to_local_datetime&lt;/code&gt; was to be used
in the absence of the exact offset to UTC.
This alone is enough for converting UTC to the local time,
and it is still used in the &lt;code&gt;Offset&lt;/code&gt; conversion
where the original value is converted to UTC then to the target time zone.
But this is inefficient,
especially if we have a large table of zone transitions.
Therefore we have &lt;code&gt;local_minus_utc&lt;/code&gt;
for caching the calculated &lt;em&gt;current&lt;/em&gt; offset.
The caller was expected to call &lt;code&gt;local_minus_utc&lt;/code&gt;
for converting the current value to UTC
and &lt;code&gt;to_local_datetime&lt;/code&gt; etc. for other cases.
For the fixed-offset time zones like &lt;code&gt;UTC&lt;/code&gt;
these methods will be largely a simple arithmetic,
so we only pay what we use.&lt;/p&gt;
&lt;p&gt;In the reality this scheme didn't work well.
&lt;code&gt;Local&lt;/code&gt; was an example of the glaring problem;
since it has to cache the value, it should have a field,
but that meant that we need to create a &lt;code&gt;Local&lt;/code&gt; instance
every time we convert to the local date!
This defies the simple interface like &lt;code&gt;dt.with_offset(UTC)&lt;/code&gt;,
and since such &lt;code&gt;Local&lt;/code&gt; instance doesn't know about the exact offset,
we have a separate flag indicating the offset is correct or not.
(In Rust, this would translate to &lt;code&gt;Option&amp;lt;FixedOffset&amp;gt;&lt;/code&gt;.)
This even breaks the original premise of
"only paying what we actually use".&lt;/p&gt;
&lt;p&gt;After I realized this problem, I'd tried several solutions
and spectacularly failed.
It was clear that we really need two kinds of types,
but I was not sure how to do that.&lt;/p&gt;
&lt;h2&gt;Time zones in Chrono 0.2&lt;/h2&gt;
&lt;p&gt;Associated types, originally proposed in &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md"&gt;RFC #195&lt;/a&gt;, were
a game changer for this problem.
They allow for two types to be smoothly connected in the compile time.
The resulting design is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Sized&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Clone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Show&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;local_minus_utc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TimeZone&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Sized&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from_offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset_from_local_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveDate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LocalResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset_from_local_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LocalResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset_from_local_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveDateTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LocalResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset_from_utc_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveDate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset_from_utc_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset_from_utc_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveDateTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// helpers and constructors follow&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tz&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TimeZone&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NaiveDateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Tz&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Date and Time follows&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This new design directly shows that
we are dealing with two different types!
&lt;code&gt;TimeZone&lt;/code&gt; creates an &lt;code&gt;Offset&lt;/code&gt; which is a storage-oriented type,
which can be converted back to the &lt;code&gt;TimeZone&lt;/code&gt; via &lt;code&gt;from_offset&lt;/code&gt;.
&lt;code&gt;TimeZone&lt;/code&gt; is used for creating date and time values,
while &lt;code&gt;Offset&lt;/code&gt; is used for converting to the local time.
I originally tried to avoid separate trait for &lt;code&gt;local_minus_utc&lt;/code&gt;,
but ultimately abandoned that plan
to make &lt;code&gt;dt.offset().local_minus_utc()&lt;/code&gt; possible.&lt;/p&gt;
&lt;p&gt;There are a set of &lt;code&gt;TimeZone&lt;/code&gt;s and &lt;code&gt;Offset&lt;/code&gt;s available:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;TimeZone&lt;/code&gt; instance&lt;/th&gt;
&lt;th&gt;&lt;code&gt;Offset&lt;/code&gt; instance&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UTC&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UTC&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FixedOffset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;FixedOffset&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Local&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;FixedOffset&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TzFile&lt;/code&gt; (*)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TzFileOffset&lt;/code&gt; (*)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TzRule&lt;/code&gt; (*)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TzRuleOffset&lt;/code&gt; (*)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(* Some instances are under the development.)&lt;/p&gt;
&lt;p&gt;One can note that some time zones are their own offsets,
as they do not have an additional data (i.e. cache) for the storage,
and &lt;code&gt;Local&lt;/code&gt; reuses the &lt;code&gt;FixedOffset&lt;/code&gt; as &lt;code&gt;Local&lt;/code&gt; itself has no state.
Other time zones have to cache its offset &lt;em&gt;and&lt;/em&gt; the transition data,
hence separate offset types.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TzFile&lt;/code&gt; and &lt;code&gt;TzRule&lt;/code&gt; is a part of tzdata support;
they will be typically used as a reference-counted version,
such as &lt;code&gt;Rc&amp;lt;TzFile&amp;gt;&lt;/code&gt; or &lt;code&gt;Arc&amp;lt;TzRule&amp;gt;&lt;/code&gt;,
to avoid the deep copying (which is common in Chrono).
&lt;code&gt;TzRule&lt;/code&gt; implements the rule string in POSIX &lt;code&gt;TZ&lt;/code&gt; environment variable,
which is not that useful by its own (since we can use &lt;code&gt;Local&lt;/code&gt; anyway),
but it's &lt;code&gt;TzFile&lt;/code&gt;'s solution to the aforementioned problem 1:
the future zone transition is encoded as a form of &lt;code&gt;TzRule&lt;/code&gt;,
and we need to implement it.&lt;/p&gt;
&lt;p&gt;At the end this new design is quite promising,
but even after &lt;code&gt;#![feature(associated_types)]&lt;/code&gt; is gone
associated types are still cutting edge features.
I had to disable debuginfo due to the Rust issue &lt;a href="https://github.com/rust-lang/rust/issues/21010"&gt;#21010&lt;/a&gt;, for example.
Hopefully though, this shall not affect the validity of this design.&lt;/p&gt;</summary></entry><entry><title>Worklog 2015-01-10</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2015-01-10.html" rel="alternate"></link><published>2015-01-11T03:51:00+09:00</published><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2015-01-11:rustlog/worklog-2015-01-10.html</id><summary type="html">&lt;p&gt;Okay, I was so frantic about the language updates and
went to (mostly) the library maintenance mode.
If you saw &lt;code&gt;encoding&lt;/code&gt; or &lt;code&gt;chrono&lt;/code&gt; from &lt;a href="https://crates.io/"&gt;crates.io&lt;/a&gt; a lot,
that's because I tended to update per &lt;em&gt;each&lt;/em&gt; breaking nightly.&lt;/p&gt;
&lt;p&gt;Anyways, we've finally got &lt;a href="http://blog.rust-lang.org/2015/01/09/Rust-1.0-alpha.html"&gt;1.0.0 alpha&lt;/a&gt; and
I can finally refrain from simply keeping libraries up.
I'm now working on Chrono 0.2, which will have a new &lt;code&gt;Offset&lt;/code&gt; design.&lt;/p&gt;
&lt;h2&gt;Grisu and rust-strconv&lt;/h2&gt;
&lt;p&gt;By the way, what happened to &lt;a href="https://github.com/lifthrasiir/rust-strconv/"&gt;rust-strconv&lt;/a&gt;?
In the previous (i.e. 3 week old) post
I've said the initial version of Grisu can be released within a week.
That was a serious misprediction and it actually took &lt;a href="https://github.com/lifthrasiir/rust-strconv/commit/81e4f157b90191ef335c2ad692e7ebd34221a367"&gt;two full weeks&lt;/a&gt;.
(What is Grisu, by the way? &lt;a href="http://www.serpentine.com/blog/2011/06/29/here-be-dragons-advances-in-problems-you-didnt-even-know-you-had/"&gt;Bryan O'Sullivan has a good introduction&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Grisu by itself is a simple algorithm to understand.
It first scales the input into a certain convenient range
(while keeping the exponent, obviously),
so that the range can be easily fit to &lt;code&gt;u64&lt;/code&gt;.
It then maintains two approximate ranges
for the actual range in which values would round to that number;
one overestimates, another underestimates.
Quoting the diagram in the comments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        +- actual range of minus
  | &amp;lt;---|---------------------- unsafe region --------------------------&amp;gt; |
  |     |                                                                 |
  |  |&amp;lt;---&amp;gt;|  | &amp;lt;--------------- safe region ---------------&amp;gt; |           |
  |  |     |  |                                               |           |
  |1 ulp|1 ulp|                 |1 ulp|1 ulp|                 |1 ulp|1 ulp|
  |&amp;lt;---&amp;gt;|&amp;lt;---&amp;gt;|                 |&amp;lt;---&amp;gt;|&amp;lt;---&amp;gt;|                 |&amp;lt;---&amp;gt;|&amp;lt;---&amp;gt;|
  |-----|-----|-------...-------|-----|-----|-------...-------|-----|-----|
  |   minus   |                 |     v     |                 |   plus    |
minus1     minus0           v - 1 ulp   v + 1 ulp           plus0       plus1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Both the scaled value and ranges are repeatedly narrowed down
until we are out of significant digits.
(There is one important inequality proved in the paper
which can be used to quickly test this.)
At this stage we have &lt;em&gt;one&lt;/em&gt; possible shortest representation,
so we try other representations to find the shortest representation
which is also closest to the actual value.
Finally, we can verify that it actually is in the underestimated range
so we can safely return it.
Each step has its own rounding error,
but it is well characterized so we account for that.&lt;/p&gt;
&lt;p&gt;The problem with implementing Grisu is not the complexity;
it's rather an analysis, which is very unwieldy to understand.
For example, the implementation shouldn't overflow,
and Grisu code actively avoids that,
but both the paper and the &lt;a href="https://github.com/v8/v8-git-mirror/blob/master/src/fast-dtoa.cc"&gt;code&lt;/a&gt; is shallow in details.
The code has an extensive documentation, but not a proof,
and it is very hard to be sure on edge cases.
At the end, it took almost a month to fully understand and write
&lt;a href="https://github.com/lifthrasiir/rust-strconv/blob/5cbbb53/src/flt2dec/strategy/grisu.rs#L212-L476"&gt;every required constraint&lt;/a&gt; in implementations down.
Frankly speaking, my comments wouldn't really help anyway
if you are to write your own reimplementation of Grisu,
but at least it should guide potential reviewers.&lt;/p&gt;
&lt;p&gt;Fortunately, my attempt has paid off.
Combined with Dragon it swiftly overshadows the original naive implementation
both in the performance (up to 1000x faster) and the accuracy.
I've exhaustively verified that
Grisu for &lt;code&gt;f32&lt;/code&gt; returns the same result as Dragon when it does give a result.
Just out of curiosity, I've also counted how many &lt;code&gt;f32&lt;/code&gt; does return &lt;code&gt;None&lt;/code&gt;;
there are precisely 17,763,160 such values
out of 2,139,095,039 positive finite values.
I have some idea for improving on severe cases&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;
but that would be another story.&lt;/p&gt;
&lt;p&gt;There are two more possible modes of floating point printing.
Grisu-like algorithm can be used to quickly try to print
a predefined number of significant digits
or up to certain number of digits after a decimal point if possible.
I have a working code to do the former (with an informal proof in progress),
but it seems not to fit well to the common interface shared by Dragon.
The common interface can notify that the following digits are zeroes,
but it is not very obvious that Grisu can report &lt;code&gt;None&lt;/code&gt; in that case.
(Grisu cannot really give the exact answer in this case.)
I'm currently studying the C++ implementation for possible resolution.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;In the worst case, 50% of 2^23 &lt;code&gt;f32&lt;/code&gt; values between 2^21 and 2^22
  return &lt;code&gt;None&lt;/code&gt; (it's 0.8% in the full range, for comparison).
  This is mostly due to Grisu's inability to handle
  the exact halfway cases very common to that range.
  Note that this range is relatively close to 1 (than many others),
  so it can impact the real world performance of Grisu.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Worklog 2014-12-20</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2014-12-20.html" rel="alternate"></link><published>2014-12-21T00:01:00+09:00</published><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2014-12-21:rustlog/worklog-2014-12-20.html</id><summary type="html">&lt;p&gt;This week we saw another series of breakages via the macro syntax reform. :)
I still didn't have much time to keep up,
so I mostly did the minimal maintenance work,
but still there are some significant tasks I've done this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/lifthrasiir/rust-encoding/commit/1803d8a7a7e442af2ecc7ea3a3cc419562a0276a"&gt;Encoding 0.2.8&lt;/a&gt; has been released.
  This is a significant, non-language-change fix due to
  the recent change to the Encoding specification.
  I've found a &lt;a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=27675"&gt;spec bug&lt;/a&gt; while working on that.&lt;/li&gt;
&lt;li&gt;I've written a small &lt;a href="https://github.com/rust-lang/rfcs/pull/532"&gt;RFC&lt;/a&gt; for
  changing the &lt;code&gt;mod&lt;/code&gt; keyword in &lt;code&gt;use&lt;/code&gt; to the &lt;code&gt;self&lt;/code&gt; keyword.
  This is my first RFC ever, so I'm glad the writing seems fine enough.&lt;/li&gt;
&lt;li&gt;I worked on the floating-point printing code of &lt;a href="https://github.com/lifthrasiir/rust-strconv"&gt;rust-strconv&lt;/a&gt;
  during the Korean Rust meetup today.
  I think I can release the initial version this week.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Worklog 2014-12-13</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2014-12-13.html" rel="alternate"></link><published>2014-12-13T23:59:00+09:00</published><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2014-12-13:rustlog/worklog-2014-12-13.html</id><summary type="html">&lt;p&gt;Due to the personal concerns I haven't do much things, but at least...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I've updated &lt;a href="https://github.com/lifthrasiir/rust-encoding/"&gt;rust-encoding&lt;/a&gt; and &lt;a href="https://github.com/lifthrasiir/rust-chrono"&gt;rust-chrono&lt;/a&gt; for opt-in &lt;code&gt;Copy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I've pushed a small &lt;a href="https://github.com/rust-lang/rust/issues/19719"&gt;fix&lt;/a&gt; for &lt;a href="https://github.com/rust-lang/rust/pull/19764"&gt;#19764&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I... think I've opened two issues (&lt;a href="https://github.com/rust-lang/rust/issues/19723"&gt;#19723&lt;/a&gt; and &lt;a href="https://github.com/rust-lang/rust/issues/19762"&gt;#19762&lt;/a&gt;) and
  started to work on the former. Not much, though.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately I didn't have spare time for working on &lt;a href="https://github.com/rust-lang/rust/pull/19606"&gt;#19606&lt;/a&gt;.
Maybe for the next week.&lt;/p&gt;</summary></entry><entry><title>Worklog 2014-12-09</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2014-12-09.html" rel="alternate"></link><published>2014-12-10T00:17:00+09:00</published><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2014-12-10:rustlog/worklog-2014-12-09.html</id><summary type="html">&lt;p&gt;Okay, I've released &lt;a href="https://github.com/lifthrasiir/rust-soundchange"&gt;rust-soundchange&lt;/a&gt; with a basic documentation and tests.
I've also pushed a &lt;a href="https://github.com/P1start/an-rs/pull/1"&gt;pull request&lt;/a&gt; to P1start's &lt;code&gt;an-rs&lt;/code&gt;,
let's see if it really is accepted :)&lt;/p&gt;
&lt;h2&gt;Notes on &lt;code&gt;english.sc&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://zompist.com/spell.html"&gt;Mark Rosenfelder's article&lt;/a&gt; links to a computerized rule file,
which I've used as a basis of rust-soundchange rules.
After some debugging, however, I found that the following rule is incorrect:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Incorrect&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="sr"&gt;/@/&lt;/span&gt;&lt;span class="n"&gt;VC&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_l&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="n"&gt;Correct&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="sr"&gt;/@/&lt;/span&gt;&lt;span class="n"&gt;VC&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_l&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This particular rule corresponds to the rule 38,
i.e. any vowel reduces to a schwa (&lt;code&gt;@&lt;/code&gt;) before final &lt;code&gt;l&lt;/code&gt; (as in &lt;code&gt;final&lt;/code&gt;),
but only when it is not the only vowel in that word and
&lt;em&gt;its sound value has been assigned by prior rules&lt;/em&gt;.
The original rule has incorrectly used an "any vowel" (&lt;code&gt;V&lt;/code&gt;) variable
in place of an "any &lt;em&gt;untranslated&lt;/em&gt; vowel" (&lt;code&gt;U&lt;/code&gt;) variable.&lt;/p&gt;
&lt;p&gt;It seems that &lt;code&gt;english.out&lt;/code&gt; itself is generated via the fixed rules
(and with this fix my implementation produces 100% exact output for this set)
but Rosenfelder forgot to update &lt;code&gt;english.sc&lt;/code&gt;. Oops.&lt;/p&gt;</summary></entry><entry><title>Worklog 2014-12-08</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2014-12-08.html" rel="alternate"></link><published>2014-12-09T02:51:00+09:00</published><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2014-12-09:rustlog/worklog-2014-12-08.html</id><summary type="html">&lt;p&gt;After some wrestling with rustc, I've taken some refresh.
I had a grand^Wstupid plan for improving &lt;a href="https://crates.io/crates/an"&gt;an&lt;/a&gt;,
by implementing a better spell-to-pronounciation algorithm and
using that to determine if the word starts with a vowel or not.
(Mostly for fun, but I also wanted to make some useful utility.)
I've now implemented an entirety of &lt;a href="http://zompist.com/spell.html"&gt;Mark Rosenfelder's algorithm&lt;/a&gt;
which has some test code like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spell_to_sound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;coffee&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;as_slice&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;kòfë&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spell_to_sound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;market&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;as_slice&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;môrkêt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spell_to_sound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ugly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;as_slice&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ûglë&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spell_to_sound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;high&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;as_slice&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hï&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spell_to_sound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;canal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;as_slice&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;känâl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;...Well, it still fails for some dozens of cases but it looks nice.
(Here I really mean that this doesn't exactly match the known output of the algorithm.
Since the algorithm itself is approximate,
if the bug actually &lt;em&gt;improves&lt;/em&gt; the error rate, I might leave it as is.)&lt;/p&gt;</summary></entry><entry><title>Worklog 2014-12-06</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2014-12-06.html" rel="alternate"></link><published>2014-12-07T13:09:00+09:00</published><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2014-12-07:rustlog/worklog-2014-12-06.html</id><summary type="html">&lt;p&gt;I was continously working on &lt;a href="https://github.com/rust-lang/rust/issues/15309"&gt;#15309&lt;/a&gt;.
Basically, Rustdoc has a link to the source code and
&lt;em&gt;some&lt;/em&gt; items have gotten their links incorrect.
This is proved quite hard to solve, as I've outlined the cause,
and I'm still figuring out how to solve that.&lt;/p&gt;
&lt;h2&gt;Wonderful world of metadata&lt;/h2&gt;
&lt;p&gt;It is a relatively hidden piece of the fact in Rust,
but Rust compiler utilizes a &lt;em&gt;metadata&lt;/em&gt;
to track almost every information across multiple crates.&lt;/p&gt;
&lt;p&gt;In fact, it is not hard to see the metadata's very existence.
The metadata occupies a custom section in the excutable files or
a self-explanatory file name &lt;code&gt;rust.metadata.bin&lt;/code&gt; in rlibs.
Any standard utilities on those files can be used to see them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ readelf /usr/local/rust/lib/libstd-4e7c5e5c.so -S &lt;span class="p"&gt;|&lt;/span&gt; grep rustc -A1
  &lt;span class="o"&gt;[&lt;/span&gt;25&lt;span class="o"&gt;]&lt;/span&gt; .note.rustc       NOTE             00000000002ebaf0  000ebaf0
       00000000001da82a  &lt;span class="m"&gt;0000000000000000&lt;/span&gt;  WA       &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;     16
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the metadata can be very huge.
In this case, the section size is &lt;code&gt;0x1da82a&lt;/code&gt; bytes, i.e. about 1.9 megs.
How much is that? It's over 60% of the entire executable if you ask that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls -al /usr/local/rust/lib/libstd-4e7c5e5c.so
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; arachneng &lt;span class="m"&gt;3197472&lt;/span&gt; Dec  &lt;span class="m"&gt;5&lt;/span&gt; 22:00 /usr/local/rust/lib/libstd-4e7c5e5c.so
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Typical C/C++ compilers work on the simplitistic assumption,
namely, they can &lt;em&gt;mangle&lt;/em&gt; names to avoid any problem.
So when you have a function named &lt;code&gt;f&lt;/code&gt; with no argument and no return type,
its name is (say) mangled into &lt;code&gt;_Z1fv&lt;/code&gt; in some compilers and
&lt;code&gt;?f@@YAXXZ&lt;/code&gt; in other compilers, so that they cannot be linked against each other.
Some compilers (notably G++) explicitly require that
there is some &lt;em&gt;dummy&lt;/em&gt; symbol like &lt;code&gt;__gxx_personality_v0&lt;/code&gt;
and otherwise the link fails.&lt;/p&gt;
&lt;p&gt;This &lt;a href="https://en.wikipedia.org/wiki/Name_mangling"&gt;name mangling&lt;/a&gt; is actually a good practice.
Different compilers commonly have different ABIs (Application Binary Interfaces),
so mixing different ABIs in the same executable should be avoided.
Many ABIs actually seem to be compatible but they often differ in details.&lt;/p&gt;
&lt;p&gt;The problem is that, the name mangling gives too little information.
If you have a linker error, well, you have a variety of options to try.
You may have tried to link from G++ to VC++.
You may have your function name incorrect.
You may have... an extra &lt;code&gt;namespace&lt;/code&gt;. (Namespaces surely affect the name mangling.)
You may have some other type incorrect, on which your function depends.
Perhaps, you shouldn't link to that function at all, since it's a template.&lt;/p&gt;
&lt;p&gt;The metadata is a good complement to the name mangling.
It has every type information to the public items,
and (in the case of Rust) every trait implementation available.
If the item has to be inlined (or generic), the &lt;em&gt;contents&lt;/em&gt; of the item is
also available to the metadata so that
the compiler can inline its definition out of the original crate.&lt;/p&gt;
&lt;p&gt;And at the expense of this improvement,
the metadata structure is &lt;em&gt;damn&lt;/em&gt; complex and the client code can go wrong.&lt;/p&gt;
&lt;h2&gt;Identifying Definitions&lt;/h2&gt;
&lt;p&gt;It seems that the metadata is nothing to do with the documentation.
Unfortunately, #15309 is an example that the metadata is indeed important:
it is hard to identify definitions across multiple crates.&lt;/p&gt;
&lt;p&gt;Consider one example.
The trait &lt;code&gt;UnicodeChar&lt;/code&gt; is actually available in three places:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unicode::u_char::UnicodeChar&lt;/code&gt; (private)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unicode::char::UnicodeChar&lt;/code&gt; (reexported, public)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::char::UnicodeChar&lt;/code&gt; (reexported again, public)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since Rustdoc strips the private items,
the primary documentation is available as &lt;code&gt;unicode::char::UnicodeChar&lt;/code&gt;.
Now, how does Rustdoc know of this reexport when generating the docs for &lt;code&gt;std&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Incredibly the answer is &lt;em&gt;no&lt;/em&gt;―Rustdoc doesn't know about the reexports!
What it actually does is to simply link to the original definition and
hope it correctly redirects to the inlined reexports.
Sounds risky, huh? But this is &lt;a href="https://github.com/rust-lang/rust/blob/a31ad6b/src/librustdoc/html/render.rs#L104-L107"&gt;what Rustdoc actually handles reexports&lt;/a&gt;.
When Rustdoc has enough information to generate redirect pages(*), it will do;
Otherwise it will use those redirect pages.&lt;/p&gt;
&lt;p&gt;(*) I should mention that the metadata obviously contains the reexports.
Still, Rustdoc only sees the original items precisely because
the metadata decoder doesn't directly show the links from the reexport to the item.
And the original items contain, alas, a path to the original items and not reexports.&lt;/p&gt;
&lt;p&gt;Links to the source code pose another problem.
The compiled crate itself doesn't have the source code, quite reasonably.
In this matter, Rustdoc again relies on the prior incarnation of itself
to generate suitable redirects.
Now say that we have implemented &lt;a href="https://github.com/rust-lang/rust/issues/12932"&gt;#12932&lt;/a&gt;
and we have multiple source links in the single documentation page.
How would you do identify the correct link to redirect?&lt;/p&gt;
&lt;p&gt;The original code was using a unique identifier to each definition,
generated shortly before the analysis phase ("phase 3").
This is called a &lt;code&gt;NodeId&lt;/code&gt; (or its cross-crate version, &lt;code&gt;DefId&lt;/code&gt;)
and Rustdoc-generated pages will check if
the &lt;code&gt;gotosrc&lt;/code&gt; parameter contains a matching &lt;code&gt;NodeId&lt;/code&gt; to redirect.
This should have been correct unless the following were correct:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;NodeId&lt;/code&gt;s change when you change the source code.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, this is primarily because &lt;code&gt;NodeId&lt;/code&gt;s are used to identify a part of
abstract syntax tree (AST).
This is also why one cannot (normally) link to a recompiled crate (yet);
the stable ABI would be awesome but it's a huge undertaking.&lt;/p&gt;
&lt;p&gt;It seemed that #15309 only appears in the &lt;code&gt;alloc&lt;/code&gt; crate.
Ultimately this was because, &lt;code&gt;rustc&lt;/code&gt; sees &lt;code&gt;--cfg jemalloc&lt;/code&gt; but not &lt;code&gt;rustdoc&lt;/code&gt; doesn't.
This small option mostly affects the &lt;code&gt;alloc&lt;/code&gt; crate,
causing &lt;code&gt;DefId&lt;/code&gt;s change.&lt;/p&gt;
&lt;p&gt;Personally I learned lots about the metadata over the course of debugging,
but only after I gave up and tried to make a &lt;a href="https://gist.github.com/lifthrasiir/7fb50a52154ffc8c0b5e"&gt;custom metadata decoder&lt;/a&gt; in Python.
Then I realized that the metadata in question had a skewed &lt;code&gt;DefId&lt;/code&gt; and
instantly looked at the Makefile. Dang.
I really hope to see a proper analysis tool (&lt;a href="https://github.com/rust-lang/rust/issues/6912"&gt;#6912&lt;/a&gt;) for the metadata.&lt;/p&gt;
&lt;h2&gt;Possible Solutions&lt;/h2&gt;
&lt;p&gt;It's indeed hard to identify definitions across multiple crates!
We don't have a definite solution, and can only outline general directions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rustdoc should not identify definitions via a &lt;code&gt;DefId&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Rustdoc should be able to generate documentations from the compiled crate.
   (This is what &lt;a href="#19606"&gt;I'm currently working on&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;In general, the metadata should have a good notion
   to uniquely identify the definition independently of the source code change.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Phew! This post went too far than I first imagined. Hope you enjoyed this.&lt;/p&gt;</summary></entry><entry><title>The Beginning</title><link href="https://lifthrasiir.github.io/rustlog/the-beginning.html" rel="alternate"></link><published>2014-12-06T18:48:00+09:00</published><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2014-12-06:rustlog/the-beginning.html</id><summary type="html">&lt;p&gt;Hello, and welcome to the first post to the Rustlog!&lt;/p&gt;
&lt;p&gt;For everyone &lt;em&gt;not&lt;/em&gt; interested about the author:
I'm &lt;a href="http://mearie.org/about/kang-seonghoon.en"&gt;Kang Seonghoon&lt;/a&gt;, a Korean software developer doing funky things.
In the world of Rust I'm probably best known for
&lt;a href="https://github.com/lifthrasiir/rust-encoding"&gt;rust-encoding&lt;/a&gt;, a comprehensive character encoding library.
I also happen to enjoy talking on Moznet #rust (as known as &lt;code&gt;Yurume&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;So what the hell is this blog?&lt;/h2&gt;
&lt;p&gt;I have a separate personal &lt;a href="http://j.mearie.org/"&gt;journal&lt;/a&gt; in my website.
Probably many of you wouldn't understand its contents;
it's almost Korean only, and even though I've done some works to
make the &lt;em&gt;whole&lt;/em&gt; website bilingual,
the journal remains quite exclusive in Korean.
(I do have some &lt;a href="http://j.mearie.org/tagged/english"&gt;English posts&lt;/a&gt; though.)&lt;/p&gt;
&lt;p&gt;Still, I have a desire to write useful posts in English.
That's why I sometimes write to &lt;a href="https://gist.github.com/lifthrasiir/"&gt;Gist&lt;/a&gt;.
It is technically not a blog, but at least it is a comfortable place
to write a Markdown post.
I also have been motivated by the concept of "worklog"
as a daily diary for logging the day's work.&lt;/p&gt;
&lt;p&gt;So I'm going to give a shot.
&lt;strong&gt;Every Rust-related post in English from now on will go here.
Also, I'll try to write a short remainder about
whatever I've done with Rust every day ("worklog").&lt;/strong&gt;
I know this is very hard from the experience,
but at least I'll try to do so.
I'm kind of a yak-shaving personnel,
but this time I chose to stick to &lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt;
as it seems easy to install and &lt;em&gt;forget&lt;/em&gt; about it.&lt;/p&gt;
&lt;p&gt;I'd appreciate any feedback on the post available here,
but unless there is a link to the explicit feedback form,
please direct any feedback to my &lt;a href="http://mearie.org/about/contact.en"&gt;personal email&lt;/a&gt;.
I'm close to &lt;em&gt;hate&lt;/em&gt; the direct comments, so sorry about that.
And obviously my writing solely represents my own opinion
and not my employer's or organization's. :)&lt;/p&gt;</summary></entry></feed>