<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Rustlog</title><link href="https://lifthrasiir.github.io/rustlog/" rel="alternate"></link><link href="https://lifthrasiir.github.io/rustlog/feeds/misc.atom.xml" rel="self"></link><id>https://lifthrasiir.github.io/rustlog/</id><updated>2015-03-06T03:23:00+09:00</updated><entry><title>Worklog 2015-03-06</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2015-03-06.html" rel="alternate"></link><updated>2015-03-06T03:23:00+09:00</updated><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2015-03-06:rustlog/worklog-2015-03-06.html</id><summary type="html">&lt;p&gt;I have recently pushed three pull requests into Rust:
&lt;a href="https://github.com/rust-lang/rust/pull/22839"&gt;#22839&lt;/a&gt;, &lt;a href="https://github.com/rust-lang/rust/pull/22971"&gt;#22971&lt;/a&gt; and &lt;a href="https://github.com/rust-lang/rust/pull/23060"&gt;#23060&lt;/a&gt;.
Each has its own significance,
but today I'll discuss about last two PRs
primarily because they strictly remove lots of redundant data
from the Rust distribution.&lt;/p&gt;
&lt;h2&gt;Anatomy of Rust Distribution&lt;/h2&gt;
&lt;p&gt;Let's look at &lt;a href="http://static.rust-lang.org/dist/2015-03-03/rust-nightly-x86_64-unknown-linux-gnu.tar.gz"&gt;2015-03-03 nightly&lt;/a&gt;,
which is the last nightly not affected by two PRs.
It is 144.8 MB after gzipped
(Note: this is 144.8 times 10&lt;sup&gt;6&lt;/sup&gt; bytes, to be exact),
and 634.5 MB before compression.
More precisely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rustc&lt;/code&gt; directory contains a main Rust distribution, and
  is 296.3 MB and 101.8 MB before and after compression.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Non-library files have negligible size (less than a megabyte).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We ship at most &lt;em&gt;three&lt;/em&gt; copies of files per crate:
Shared libraries from snapshot compiler,
shared libraries for the compiled Rust executable,
and optionally static counterparts of them.&lt;/p&gt;
&lt;p&gt;We can omit static libraries from the distribution.
This completely removes the ability to statically link,
but this would remove 48.1 MB and 11.3 MB of binary
before and after compression.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://lifthrasiir.github.io/rustlog/worklog-2014-12-06.html"&gt;As previously mentioned&lt;/a&gt;, metadata takes much space.
Some of them are compressed with gzip and
actually does not compress well in the tarball.
Some of them, prominently in static libraries, are not compressed
so that they can be conveniently &lt;code&gt;mmap&lt;/code&gt;ped.&lt;/p&gt;
&lt;p&gt;Static libraries have 93.4 MB of uncompressed metadata.
Shared libraries have 32.7 MB of compressed metadata.
Assuming that they have same compression ratio as the overall directory
(and that already compressed metadata do not compress at all),
they will take about 65 MB in the gzipped tarball.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rust-docs&lt;/code&gt; directory contains generated HTML documentation
  (which includes compiler crates, as in &lt;code&gt;make compiler-docs&lt;/code&gt;) and
  is 313.3 MB and 40.0 MB before and after compression.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are particularly large crates:
&lt;code&gt;rustc&lt;/code&gt;, &lt;code&gt;rustc_trans&lt;/code&gt;, &lt;code&gt;std&lt;/code&gt;, &lt;code&gt;rustc_typeck&lt;/code&gt; and &lt;code&gt;rustc_lint&lt;/code&gt; crates
take 218.6 MB and 30.6 MB before and after compression.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we actually try to remove compiler crates,
that will remove at least 204.6 MB and 29.4 MB before and compression.
Why "at least"? That will also remove files from other directories,
but that's cumbersome to quantify.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The HTML documentation also essentially reproduces
a public portion of each crate's source code,
which takes 23.8 MB and 5.4 MB before and after compression.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cargo&lt;/code&gt; directory contains (of course) Cargo, and
  is 8.9 MB and 3.4 MB before and after compression.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ways to Enlightenment (or sorta)&lt;/h2&gt;
&lt;p&gt;There are several ways to shrink the tarball.&lt;/p&gt;
&lt;p&gt;First, we observe that the docs are technically
same contents as the shipped libraries.
That would mean, if possible,
generating docs from the compiled library on the fly
will completely remove docs from the distribution!
&lt;a href="https://github.com/rust-lang/rust/pull/19606"&gt;#19606&lt;/a&gt; was my initial attempt to do that,
but it had several obstacles I wasn't able to tackle on time.&lt;/p&gt;
&lt;p&gt;There are some alternative solutions with docs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Move everything to JavaScript with an optimized format.
   The "HTML" documentation will actually be
   a huge web application that renders the page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a variation of 1, make it a Rust web server.
   If we don't care about bundling &lt;a href="https://github.com/hyperium/hyper"&gt;Hyper&lt;/a&gt; with Rust, why not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove compiler docs and keep others as is.
   This might be a good trade-off as
   many end users won't bother looking at them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove source codes from the docs. (&lt;a href="https://github.com/rust-lang/rust/issues/23061"&gt;#23601&lt;/a&gt;)
   We already have a separate tarball for source codes,
   so let users download them if they really want.
   Of course, this alone won't make much effect.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Second, we can shrink the metadata.
The metadata was based on the &lt;a href="http://ebml.sourceforge.net/specs/"&gt;EBML&lt;/a&gt;
but we had very, very different use cases compared to Matroska:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We don't have lots of tags.
  EBML tags are quite general (and tuned) because
  each tag essentially is a unique identifier
  and there can be lots of them in one file.
  Rust metadata is different:
  we have about one hundred or so specialized tags and
  some dozens for auto-serialized AST.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We don't have a proper schema.
  As mentioned above, auto-serialized AST is
  almost incomprehensible without the exact knowledge of data structure.
  Still, somehow, we can navigate through that.
  There are primarily two classes of serialization formats,
  schematic (like protobuf) and schemaless (like JSON),
  and &lt;em&gt;our use case is neither of them&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We don't perform relaxation.
  That is, we don't encode the length optimally.
  This is also a big limitation of EBML:
  it does not have an indefinitely-sized container.
  Moreover, we occasionally refer to other portion of encoded metadata
  by a simple byte offset.
  This makes the proper relaxation quite hard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EBML itself does not define an encoding for primitive values
  (not uncommon with schematic serialization formats),
  and our ad-hoc encoding for them is very inefficient.
  For example, we have used 4 bytes for values
  that occurs some hundred thousand times and is less than 100.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main direction on metadata would be
either ditching EBML or incrementally improving that.
This was a subject of &lt;a href="https://github.com/rust-lang/rust/issues/2743"&gt;2.5 year old bug&lt;/a&gt;,
and I always had an eye on that.&lt;/p&gt;
&lt;p&gt;Third, we can have only one copy of metadata per crate.
This calls for two main prerequisites:
rustc should be stable enough that
we can combine rustc libraries and user code libraries, and
rustc should have a knowledge of external metadata,
which would look similar to Windows &lt;a href="https://en.wikipedia.org/wiki/Program_database"&gt;PDB file&lt;/a&gt;.
That'd be a huge undertaking though.&lt;/p&gt;
&lt;p&gt;Lastly, we can simply switch to something better than gzip.
Gzip is very old algorithm: it relies on
four-score-old modelling algorithm---&lt;a href="https://en.wikipedia.org/wiki/LZ77_and_LZ78"&gt;LZ77&lt;/a&gt;---and
suboptimal coding algorithm---skewed &lt;a href="https://en.wikipedia.org/wiki/Huffman_coding"&gt;Huffman tree&lt;/a&gt;.
Its use of LZ77 is also suboptimal,
as the matching window is limited in 64 KB and
anything beyond that won't be deduplicated.
The existing suggestion was to use &lt;a href="http://tukaani.org/xz/"&gt;xz&lt;/a&gt; for tarballs (&lt;a href="https://github.com/rust-lang/rust/issues/21724"&gt;#21724&lt;/a&gt;)
and Snappy or LZ4 for metadata (&lt;a href="https://github.com/rust-lang/rust/issues/6902"&gt;#6902&lt;/a&gt;)
They should use different algorithms as
metadata should decompress quickly.&lt;/p&gt;
&lt;h2&gt;Achievements&lt;/h2&gt;
&lt;p&gt;So what had I do? Warning: Bragging follows.&lt;/p&gt;
&lt;p&gt;The first PR, &lt;a href="https://github.com/rust-lang/rust/pull/22971"&gt;#22971&lt;/a&gt;, changes the metadata encoding
to greatly reduce the inherent overhead of EBML.
(In fact, it is now completely different from EBML!)
I kept somewhat debatable nature of navigable serialization format,
which needs schema for complete decoding
but is enough self-structured that can be inspected without much effort.
@eddyb told me that he really wants to get rid of that nature,
and I guess the future PRs would address that.&lt;/p&gt;
&lt;p&gt;The second PR, &lt;a href="https://github.com/rust-lang/rust/pull/23060"&gt;#23060&lt;/a&gt;, is very cost-effective one.
We all know that compiler crates are large,
but it becomes suspicious when
docs for librustc are four times larger than those for libstd
while libstd actually has more code than librustc (!).
This ultimately traced to the quadratic growth of sidebars:
When the module contains N items,
there would be N sidebars with N items each.
librustc had a large LLVM binding module, which caused a huge bloat.
The solution was to move them into a shared JavaScript file per module.&lt;/p&gt;
&lt;p&gt;Was that effective? I think so.
In fact, if my measurement is correct,
the updated tarball should be &lt;strong&gt;35 MB&lt;/strong&gt; smaller than the original,
and the uncompressed size should be halved.
Note that at the time of writing,
the first PR has been already deployed
and that resulted in universal 10 MB decrease in size.
I too was surprised at the numbers,
as my initial goal was just to reduce some 30% of metadata.
Actually I was able to reduce 30% of &lt;em&gt;entire&lt;/em&gt; tarball. Great.&lt;/p&gt;
&lt;p&gt;There are still many possible improvements on the distribution size.
I welcome any suggestion, concrete proposal or implementation;
I hope this post to motivate anyone interested in this task.&lt;/p&gt;</summary></entry><entry><title>Worklog 2015-02-19</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2015-02-19.html" rel="alternate"></link><updated>2015-02-19T23:12:00+09:00</updated><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2015-02-19:rustlog/worklog-2015-02-19.html</id><summary type="html">&lt;p&gt;Long time no see.
My daily job and other various distractions
prevented me from doing a continuous work like blogging.
Well, I finally finished &lt;a href="https://github.com/lifthrasiir/rust-chrono/blob/0.2/CHANGELOG.md#020-2015-02-19"&gt;Chrono 0.2&lt;/a&gt; up
so I have something to write down now.&lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://lifthrasiir.github.io/rustlog/worklog-2015-01-13.html"&gt;previous post&lt;/a&gt; about Chrono,
I discussed about a new time zone and offset handling of Chrono 0.2.
This alone is a big change,
but another big change in Chrono 0.2 is
a new formatting and parsing API.
Chrono 0.1 already had a rudimentary formatting API via &lt;code&gt;format&lt;/code&gt; method,
but it didn't have a parsing API
which was another pain point besides from local date/time handling.&lt;/p&gt;
&lt;p&gt;Chrono 0.2 has three different pieces of new APIs
redesigned for formatting and parsing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Formatting syntax representation ("items") and parsing&lt;/li&gt;
&lt;li&gt;Formatting with items&lt;/li&gt;
&lt;li&gt;Parsing with items&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Altogether they form an advanced formatting facility in Chrono 0.2.
I'll try to briefly discuss their designs and justifications.&lt;/p&gt;
&lt;h2&gt;Formatting Items&lt;/h2&gt;
&lt;p&gt;In Chrono, a formatting item is a unit of formatting or parsing.
For example a &lt;code&gt;strftime&lt;/code&gt;-like format string &lt;code&gt;%Y-%m-%d&lt;/code&gt; has
five different formatting items:
&lt;code&gt;%Y&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;%m&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;%d&lt;/code&gt;.
Chrono decouples a formatting syntax from
the actual meaning of formatting items,
so they have the following (somewhat verbose) internal representations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pad&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pad&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pad&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This decoupling allows Chrono
to support multiple formatting syntax,
such as &lt;code&gt;YYYY-MM-DD&lt;/code&gt; or &lt;a href="http://fuckinggodateformat.com/"&gt;Go-like &lt;code&gt;2006-01-02&lt;/code&gt;&lt;/a&gt; instead.
Also, Chrono can have "hidden" formatting items
that can be used for internal purposes.
RFC 2822 and 3339 support is implemented in this way.&lt;/p&gt;
&lt;p&gt;The formatting item is a good abstraction,
but every abstraction comes with a complexity.
In the case of Chrono
the complexity arises from the desire to avoid allocation.
The number of formatting items is
proportional to the length of format string
in the worst case,
so we cannot blindly collect items into a collection.
Instead, Chrono returns an &lt;code&gt;Iterator&lt;/code&gt; of formatting items
and directly consumes that iterator
for printing the date and time.
Therefore the following identity holds:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StrftimeItems&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%Y-%m-%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;::&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pad&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pad&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pad&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;)]);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I believe this redesign has a maximal flexibility
while retaining an ability to avoid &lt;code&gt;std&lt;/code&gt; at all.&lt;/p&gt;
&lt;h2&gt;Formatting with Items&lt;/h2&gt;
&lt;p&gt;Formatting with items is done with a new &lt;code&gt;format_with_items&lt;/code&gt; method.
The original &lt;code&gt;format&lt;/code&gt; method is now a thin wrapper over that.&lt;/p&gt;
&lt;p&gt;This part of Chrono remains relatively unchanged,
but there are some notable small changes
which deserve the explanation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The original &lt;code&gt;format&lt;/code&gt; had a bug with leap seconds:
  Instead of printing &lt;code&gt;23:59:60.234567890&lt;/code&gt;,
  it would print &lt;code&gt;23:59:59.1234567890&lt;/code&gt;.
  It originates from Chrono's unique handling of leap seconds,
  and has been fixed in Chrono 0.2.&lt;/li&gt;
&lt;li&gt;There are &lt;code&gt;Numeric::Nanosecond&lt;/code&gt; and &lt;code&gt;Fixed::Nanosecond&lt;/code&gt;.
  The former corresponds to &lt;code&gt;strftime&lt;/code&gt;'s &lt;code&gt;%f&lt;/code&gt; specifier
  and was present since Chrono 0.1.
  The latter is a new formatting item
  which may print nothing, &lt;code&gt;.###&lt;/code&gt;, &lt;code&gt;.######&lt;/code&gt; or &lt;code&gt;.#########&lt;/code&gt;
  depending on the available accuracy.
  (An empty string is for the whole number of seconds.)
  This "adaptive" version turned out to be
  much more useful for parsing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Numeric::Timestamp&lt;/code&gt; (&lt;code&gt;%s&lt;/code&gt;) is now supported.
  It was delayed due to the proper local date/time handling.&lt;/li&gt;
&lt;li&gt;While this change is quite subtle,
  &lt;code&gt;Numeric::Year&lt;/code&gt; (&lt;code&gt;%Y&lt;/code&gt;) and &lt;code&gt;Numeric::IsoYear&lt;/code&gt; (&lt;code&gt;%G&lt;/code&gt;)
  now has an explicit sign for years not between 1 BCE and 9999 CE.
  It is a necessity from bijective parsing,
  which means that once printed,
  any valid date and time can be parsed into the original value.
  This particular scheme is adopted from ISO 8601:2004,
  so this is not really Chrono's own invention.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Parsing with Items&lt;/h2&gt;
&lt;p&gt;Okay, this is a fun part.
Basically Chrono 0.2 has the following parsing algorithm:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A fixed string parses as is:
   It has to appear in the input string as is.&lt;/li&gt;
&lt;li&gt;A sequence of one or more whitespace consumes
   &lt;em&gt;zero&lt;/em&gt; or more whitespace.&lt;/li&gt;
&lt;li&gt;Most numeric items (&lt;code&gt;Numeric::*&lt;/code&gt;) have
   a predefined &lt;strong&gt;parsing width&lt;/strong&gt;,
   the maximal number of digits that can be consumed.
   They consume zero or more whitespace
   followed by one or more but limited number of digits.
   The exception is made to &lt;code&gt;Numeric::Year&lt;/code&gt; and &lt;code&gt;Numeric::IsoYear&lt;/code&gt;,
   which may accept an arbitrary number of digits
   when preceded by a sign.&lt;/li&gt;
&lt;li&gt;Fixed items (&lt;code&gt;Fixed::*&lt;/code&gt;) have their own parsing logics,
   but normally does not consume preceding whitespace.
   They also normally ignore cases.&lt;/li&gt;
&lt;li&gt;At the end of the formatting items,
   the whole input string should have been consumed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is modelled after &lt;code&gt;strptime&lt;/code&gt;'s parsing algorithm,
which seems to handle lots of corner cases.
This allows a lax input like &lt;code&gt;2014-2-6&lt;/code&gt;
for a format string &lt;code&gt;%Y-%m-%d&lt;/code&gt;.
The fixed parsing width allows a format string like &lt;code&gt;%Y%m%d&lt;/code&gt;
which would accept strings like &lt;code&gt;20140206&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Parsing is daunting work,
implemented with two rather big modules (&lt;code&gt;chrono::format::{parse,scan}&lt;/code&gt;),
but it's actually an easy part.
Parsing only yields different date/time parts,
which has to be merged into actual values via the &lt;strong&gt;resolution algorithm&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As an easy example, consider RFC 2822.
&lt;a href="https://tools.ietf.org/html/rfc2822#section-3.3"&gt;RFC 2822 date and time format&lt;/a&gt; has a day of week part,
which should be consistent to other date parts when specified.
But &lt;code&gt;strptime&lt;/code&gt;-based parse would happily accept inconsistent input:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Wed, 31 Dec 2014 04:26:40 +0000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="s"&gt;&amp;#39;%a, &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; %b %Y %H:%M:%S +0000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;struct_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tm_year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_mon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_mday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;tm_hour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_sec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;tm_wday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_yday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;365&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_isdst&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Thu, 31 Dec 2014 04:26:40 +0000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="s"&gt;&amp;#39;%a, &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; %b %Y %H:%M:%S +0000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;struct_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tm_year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_mon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_mday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;tm_hour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_sec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;tm_wday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_yday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;365&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_isdst&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Resolving date/time parts is littered with lots of corner cases,
and that's why common date/time parsers do not correctly implement it;
as far as I know,
glibc, Python and JodaTime completely ignores the resolution.
Therefore I'm glad to announce that
&lt;strong&gt;Chrono 0.2 has a complete and known-to-be-correct resolution algorithm&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Chrono has a dedicated date/time part storage called &lt;code&gt;Parsed&lt;/code&gt;.
The resolution algorithm is hard to describe as is,
but the relevant &lt;a href="https://github.com/lifthrasiir/rust-chrono/blob/master/src/format/parsed.rs"&gt;source code&lt;/a&gt; is relatively well-commented
and worth reading if you are interested in the algorithm.&lt;/p&gt;
&lt;h2&gt;Chrono 0.3?&lt;/h2&gt;
&lt;p&gt;Maybe this might be an early assumption,
but Chrono 0.2 is intended to be a stable base of
the future API evolution.
The very main design decision was already in 0.1,
but 0.2 completes and fixes the biggest problem with 0.1.&lt;/p&gt;
&lt;p&gt;There are &lt;a href="https://github.com/lifthrasiir/rust-chrono/issues"&gt;some issues&lt;/a&gt; I've thought about 0.3.
Some of them will be definitely implemented in 0.3 (e.g. tzfile support),
some others are somewhat illusive (e.g. additional format syntax).
But these issues do not replace the users' feedback.
Personally I'd like to thank /u/savage884,
who brought the problem of local date handling in the &lt;a href="https://www.reddit.com/r/rust/comments/2w825v/local_times_in_chrono/"&gt;/r/rust post&lt;/a&gt;.
This post crucially helped me finishing the work and releasing 0.2.
I wish others give a feedback for Chrono like that,
so Chrono doesn't remain an library "considered annoying but designed so",
which situation I really don't like.&lt;/p&gt;</summary></entry><entry><title>Summary of Korean Rust Meetup #4</title><link href="https://lifthrasiir.github.io/rustlog/summary-of-korean-rust-meetup-4.html" rel="alternate"></link><updated>2015-01-20T11:17:00+09:00</updated><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2015-01-20:rustlog/summary-of-korean-rust-meetup-4.html</id><summary type="html">&lt;p&gt;As I've &lt;a href="worklog-2015-01-17.html"&gt;promised&lt;/a&gt; before,
this is a summary of the 4th Korean Rust Meetup
hosted by &lt;a href="http://rust-kr.org/"&gt;Korean Rust User Group&lt;/a&gt;,
where people concentrate on getting things done
no matter they are working on (libraries, Rust PRs and so on).&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="https://github.com/klutzy"&gt;@klutzy&lt;/a&gt; was repairing
&lt;a href="https://github.com/klutzy/suruga"&gt;suruga&lt;/a&gt;'s experimental X.509 parser.
There was some work on the certificate verification for a while,
but recent macro reforms broke them a lot.
Taking this as an opportunity to fully develop the parser,
the development branch of suruga now got
at least one kind of extensions working.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/kroisse"&gt;@kroisse&lt;/a&gt; worked on
the &lt;a href="https://github.com/earthreader/rust-earth"&gt;Rust port&lt;/a&gt; of
&lt;a href="http://libearth.earthreader.org/"&gt;libearth&lt;/a&gt;,
a supporting library for the &lt;a href="http://earthreader.org/"&gt;Earth Reader&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I (&lt;a href="https://github.com/lifthrasiir"&gt;@lifthrasiir&lt;/a&gt;) added
a &lt;a href="https://github.com/rust-lang/rust/pull/21304"&gt;new testing script for Rustdoc outputs&lt;/a&gt;.
Actually I wasn't able to send a pull request in time
(the PR was sent hours after the meetup),
as I accidentally omitted &lt;code&gt;NO_REBUILD=1&lt;/code&gt; and wasted some hours. :S&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/sanxiyn"&gt;@sanxiyn&lt;/a&gt; got
a &lt;a href="https://github.com/rust-lang/rust/pull/21323"&gt;basic infrastructure for code completion&lt;/a&gt;.
At the moment it is able to produce
a set of possible field names at given file position.
This will tremendously help the development of IDEs for Rust.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/simnalamburt"&gt;@simnalamburt&lt;/a&gt; worked on
&lt;a href="https://github.com/simnalamburt/obj-rs"&gt;obj-rs&lt;/a&gt;
which parses Wavefront &lt;code&gt;.obj&lt;/code&gt; file.
We already have &lt;a href="https://crates.io/search?q=obj"&gt;some existing parsers&lt;/a&gt;,
but I've been told that
other parsers cannot handle files produced by proprietary softwares,
such as 3ds Max, so their uses are somewhat limited.
It will help many professional game developers I guess.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There were also some interested people who are simply willing to learn Rust.
This is partly because the meetup was co-located with other meetups
(such as &lt;a href="https://ko-kr.facebook.com/pyjog"&gt;PyJog&lt;/a&gt;).
Having 1.0.0 alpha surely was good for them!
I'm looking forward to the next meetup,
which would likely be on the next month (February 2015).&lt;/p&gt;</summary></entry><entry><title>Worklog 2015-01-17</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2015-01-17.html" rel="alternate"></link><updated>2015-01-18T03:58:00+09:00</updated><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2015-01-18:rustlog/worklog-2015-01-17.html</id><summary type="html">&lt;p&gt;In the case you don't know,
there are a number of Korean people interested in and working with Rust.
Consequently, the emergence of &lt;a href="http://rust-kr.org/"&gt;Korean Rust User Group&lt;/a&gt;
should be evident.
It organizes a soon-to-be-monthly series of loose meetups,
where people concentrate on getting things done
no matter they are working on (libraries, Rust PRs and so on).&lt;/p&gt;
&lt;p&gt;Today we had the fourth meetup (the previous one was on 2014-12-20),
and as an advertisement (haha)
I'm going to post a short summary of
things that actually have been done in that meetup soon.
For &lt;em&gt;this&lt;/em&gt; worklog, I'm going to discuss my newest PR, &lt;a href="https://github.com/rust-lang/rust/pull/21304"&gt;#21304&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Rustdoc Testing&lt;/h2&gt;
&lt;p&gt;It is relatively well known that
Rustdoc is one of the most under-tested components in the entire tree.
That is partly because
we are dealing with the HTML output
(the write-only language&lt;sup&gt;TM&lt;/sup&gt; since circa 2004)
which is often hard to test without manual intervention.
Having fixed several Rustdoc issues in the past,
I naturally wanted to get the regression test for Rustdoc
but was surprised that there are only handful number of actual tests.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rust/pull/21304"&gt;#21304&lt;/a&gt; is my attempt to resolve this issue.
It adds a moderately-sized Python script
for matching against given portion of the HTML file.
Hopefully (note the caveats listed below),
it will make writing Rustdoc tests easier
since the code and verification data are integrated.
For example, the &lt;code&gt;run-make/rustdoc-where&lt;/code&gt; test uses
this verification script
to check if the &lt;code&gt;where&lt;/code&gt; clause is present in the output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;grep &lt;span class="s2"&gt;&amp;quot;Alpha.*where.*A:.*MyTrait&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$DOC&lt;/span&gt;/struct.Alpha.html &amp;gt; /dev/null
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Alpha&amp;quot;&lt;/span&gt;
grep &lt;span class="s2"&gt;&amp;quot;Bravo.*where.*B:.*MyTrait&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$DOC&lt;/span&gt;/trait.Bravo.html &amp;gt; /dev/null
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bravo&amp;quot;&lt;/span&gt;
grep &lt;span class="s2"&gt;&amp;quot;charlie.*where.*C:.*MyTrait&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$DOC&lt;/span&gt;/fn.charlie.html &amp;gt; /dev/null
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Charlie&amp;quot;&lt;/span&gt;
grep &lt;span class="s2"&gt;&amp;quot;impl.*Delta.*where.*D:.*MyTrait&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$DOC&lt;/span&gt;/struct.Delta.html &amp;gt; /dev/null
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Delta&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# and so on&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This chunk of code is separate from
the actual source code being compiled.
With this PR, the following Rust code
can also be used to verify its Rustdoc output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// @matches foo/struct.Alpha.html &amp;#39;//pre&amp;#39; &amp;quot;Alpha.*where.*A:.*MyTrait&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Alpha&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyTrait&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// @matches foo/trait.Bravo.html &amp;#39;//pre&amp;#39; &amp;quot;Bravo.*where.*B:.*MyTrait&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bravo&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyTrait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// @matches foo/fn.charlie.html &amp;#39;//pre&amp;#39; &amp;quot;charlie.*where.*C:.*MyTrait&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;charlie&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyTrait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Delta&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// @matches foo/struct.Delta.html &amp;#39;//*[@class=&amp;quot;impl&amp;quot;]//code&amp;#39; &amp;quot;impl.*Delta.*where.*D:.*MyTrait&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Delta&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyTrait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// and so on&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This actually constrains the portion of HTML to look at,
so we can avoid some kinds of false positives.
The cons is XPath, but that's the best we can achieve
without introducing any non-standard Python dependencies.
(Yes, Python has a built-in XPath implementation, slightly flawed.)
Any suggestion in this area is welcomed.&lt;/p&gt;
&lt;p&gt;I have some plans to do after this PR gets accepted.
The first is, of course, turning Rustdoc tests into a new kind of tests.
This will make writing Rustdoc tests more easier
(add one file and done)
so the Rustdoc fixes would get proper regression tests.
I expect that we will need tons of &lt;code&gt;A-needstest&lt;/code&gt; after this change.&lt;/p&gt;
&lt;p&gt;The second is a built-in link checker and other analyses.
I already worked on &lt;a href="https://github.com/rust-lang/rust/issues/15309"&gt;#15309&lt;/a&gt;,
and summarized the status of internal links in the generated docs,
but frankly this should be done automatically.
&lt;a href="https://www.reddit.com/r/rust/comments/2s0e9x/dead_links_in_documentation/"&gt;XMPPwocky has demonstrated the usefulness of link checker&lt;/a&gt;,
but his checker uses &lt;code&gt;html5ever&lt;/code&gt;
which is too large to integrate into the main tree.
If we can get a reasonable performance with a link checker in Python,
it would be great.
(The link checker based on &lt;code&gt;html5ever&lt;/code&gt; might be useful for
&lt;a href="https://github.com/rust-lang/rust/issues/20827"&gt;bigger testing infrastructure&lt;/a&gt;, though.)&lt;/p&gt;
&lt;p&gt;Oh, and as aside I should really resume working on &lt;a href="https://github.com/rust-lang/rust/pull/19606"&gt;#19606&lt;/a&gt;...&lt;/p&gt;</summary></entry><entry><title>Worklog 2015-01-14</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2015-01-14.html" rel="alternate"></link><updated>2015-01-15T02:17:00+09:00</updated><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2015-01-15:rustlog/worklog-2015-01-14.html</id><summary type="html">&lt;p&gt;A day for smaller works. :)&lt;/p&gt;
&lt;p&gt;I've updated the horribly outdated &lt;a href="http://cosmic.mearie.org/2014/01/periodic-table-of-rust-types/"&gt;Periodic Table&lt;/a&gt; of Rust Types.
The resulting table seems a lot clearer than the previous.
I've also received a series of suggestions and
reports of mistakes (oops) from /r/rust.&lt;/p&gt;
&lt;p&gt;I've also pushed a &lt;a href="https://github.com/lifthrasiir/rust-maybe_utf8"&gt;MaybeUTF8&lt;/a&gt; library.
This was originally a part of &lt;a href="https://github.com/lifthrasiir/rust-zip"&gt;rust-zip&lt;/a&gt; library,
but this is slightly undermaintained than &lt;a href="https://github.com/mvdnes/zip-rs"&gt;zip-rs&lt;/a&gt;,
and I basically kept it just compilable in the recent nightly.
In the long term I plan to merge some design of rust-zip into zip-rs,
and as a preparation I've separated this into a separate crate.
&lt;code&gt;MaybeUTF8&lt;/code&gt; was what newer nightlies liked to break, anyway.&lt;/p&gt;</summary></entry><entry><title>Worklog 2015-01-13</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2015-01-13.html" rel="alternate"></link><updated>2015-01-14T02:19:00+09:00</updated><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2015-01-14:rustlog/worklog-2015-01-13.html</id><summary type="html">&lt;p&gt;I've finally got the initial design of &lt;a href="https://github.com/lifthrasiir/rust-chrono/tree/0.2/"&gt;Chrono 0.2&lt;/a&gt; working.
It took so much time, partially because
I'm working on dozens of other projects including Rust libraries.
It solves one of the major annoyance with Chrono,
so I'm glad that this new design is promising.&lt;/p&gt;
&lt;h2&gt;Time zones in Chrono 0.1&lt;/h2&gt;
&lt;p&gt;As always, I start by pointing to
&lt;a href="http://naggum.no/lugm-time.html"&gt;Erik Naggum's excellent essay about date and time&lt;/a&gt;.
(Yes, I'm terrible at story telling and I won't say a lot about that.)
Most importantly, the core aspect of time zone is that
it is ultimately a political creation rather than a natural necessity.
This complicates lots of things,
though Author David Olson and others have done
a &lt;a href="https://www.iana.org/time-zones"&gt;tremendously important work&lt;/a&gt; in this regard.&lt;/p&gt;
&lt;p&gt;There are several problems with time zones:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There is no reliable way to handle the local date in the future.&lt;/li&gt;
&lt;li&gt;There can exist a local date which occurred in two or more instants.&lt;/li&gt;
&lt;li&gt;There can exist a local date which never has been occurred.&lt;/li&gt;
&lt;li&gt;The conversion process itself is seriously annoying
   and easy to make a mistake.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(If you are interested in the timekeeping,
you'll realize that this list equally applies to leap seconds.
I had to deal with them in Chrono as well,
and chose to make them invisible to the normal usage.)&lt;/p&gt;
&lt;p&gt;In fact, Chrono's original &lt;code&gt;Offset&lt;/code&gt; design
does explicitly account for these problems.
In Chrono, the local date is a concept
only meaningful to accessors and formatting routines,
eliminating the very source of 1.
The possibility of 2 and 3 is handled via the &lt;code&gt;LocalResult&lt;/code&gt; enum,
while 4 is handled via... delegating &lt;em&gt;everything&lt;/em&gt; to the &lt;code&gt;Offset&lt;/code&gt;.
This decision is partly because
we would only have a handful number of &lt;code&gt;Offset&lt;/code&gt; implementations,
so we have to implement them anyway.
In the end, we had something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Clone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Show&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;local_minus_utc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from_local_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveDate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LocalResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from_local_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LocalResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from_local_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveDateTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LocalResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to_local_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveDate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NaiveDate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to_local_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NaiveTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to_local_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveDateTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NaiveDateTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ymd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// other constructors follow&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Off&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NaiveDateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Off&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Date and Time follows&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This sounds good.
You can put the offset data into the timezone-aware &lt;code&gt;DateTime&lt;/code&gt;,
and use it to convert to the local date (&lt;code&gt;to_local_date&lt;/code&gt;).
In the converse, &lt;code&gt;DateTime&lt;/code&gt; has to be created from &lt;code&gt;Offset&lt;/code&gt;
so that it converts to the internal representation in UTC
(&lt;code&gt;from_local_date&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;But you might wonder:
why is &lt;code&gt;local_minus_utc&lt;/code&gt; separate from &lt;code&gt;to_local_datetime&lt;/code&gt;?
The latter can be implemented via the former, right?
Yes! In the current implementation the latter is redundant.
And this redundancy suggests a bigger problem.&lt;/p&gt;
&lt;p&gt;Originally, &lt;code&gt;to_local_datetime&lt;/code&gt; was to be used
in the absence of the exact offset to UTC.
This alone is enough for converting UTC to the local time,
and it is still used in the &lt;code&gt;Offset&lt;/code&gt; conversion
where the original value is converted to UTC then to the target time zone.
But this is inefficient,
especially if we have a large table of zone transitions.
Therefore we have &lt;code&gt;local_minus_utc&lt;/code&gt;
for caching the calculated &lt;em&gt;current&lt;/em&gt; offset.
The caller was expected to call &lt;code&gt;local_minus_utc&lt;/code&gt;
for converting the current value to UTC
and &lt;code&gt;to_local_datetime&lt;/code&gt; etc. for other cases.
For the fixed-offset time zones like &lt;code&gt;UTC&lt;/code&gt;
these methods will be largely a simple arithmetic,
so we only pay what we use.&lt;/p&gt;
&lt;p&gt;In the reality this scheme didn't work well.
&lt;code&gt;Local&lt;/code&gt; was an example of the glaring problem;
since it has to cache the value, it should have a field,
but that meant that we need to create a &lt;code&gt;Local&lt;/code&gt; instance
every time we convert to the local date!
This defies the simple interface like &lt;code&gt;dt.with_offset(UTC)&lt;/code&gt;,
and since such &lt;code&gt;Local&lt;/code&gt; instance doesn't know about the exact offset,
we have a separate flag indicating the offset is correct or not.
(In Rust, this would translate to &lt;code&gt;Option&amp;lt;FixedOffset&amp;gt;&lt;/code&gt;.)
This even breaks the original premise of
"only paying what we actually use".&lt;/p&gt;
&lt;p&gt;After I realized this problem, I'd tried several solutions
and spectacularly failed.
It was clear that we really need two kinds of types,
but I was not sure how to do that.&lt;/p&gt;
&lt;h2&gt;Time zones in Chrono 0.2&lt;/h2&gt;
&lt;p&gt;Associated types, originally proposed in &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md"&gt;RFC #195&lt;/a&gt;, were
a game changer for this problem.
They allow for two types to be smoothly connected in the compile time.
The resulting design is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Sized&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Clone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Show&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;local_minus_utc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TimeZone&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Sized&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from_offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset_from_local_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveDate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LocalResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset_from_local_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LocalResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset_from_local_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveDateTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LocalResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset_from_utc_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveDate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset_from_utc_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset_from_utc_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;NaiveDateTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// helpers and constructors follow&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tz&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TimeZone&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NaiveDateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Tz&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Date and Time follows&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This new design directly shows that
we are dealing with two different types!
&lt;code&gt;TimeZone&lt;/code&gt; creates an &lt;code&gt;Offset&lt;/code&gt; which is a storage-oriented type,
which can be converted back to the &lt;code&gt;TimeZone&lt;/code&gt; via &lt;code&gt;from_offset&lt;/code&gt;.
&lt;code&gt;TimeZone&lt;/code&gt; is used for creating date and time values,
while &lt;code&gt;Offset&lt;/code&gt; is used for converting to the local time.
I originally tried to avoid separate trait for &lt;code&gt;local_minus_utc&lt;/code&gt;,
but ultimately abandoned that plan
to make &lt;code&gt;dt.offset().local_minus_utc()&lt;/code&gt; possible.&lt;/p&gt;
&lt;p&gt;There are a set of &lt;code&gt;TimeZone&lt;/code&gt;s and &lt;code&gt;Offset&lt;/code&gt;s available:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;TimeZone&lt;/code&gt; instance&lt;/th&gt;
&lt;th&gt;&lt;code&gt;Offset&lt;/code&gt; instance&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UTC&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UTC&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FixedOffset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;FixedOffset&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Local&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;FixedOffset&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TzFile&lt;/code&gt; (*)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TzFileOffset&lt;/code&gt; (*)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TzRule&lt;/code&gt; (*)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TzRuleOffset&lt;/code&gt; (*)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(* Some instances are under the development.)&lt;/p&gt;
&lt;p&gt;One can note that some time zones are their own offsets,
as they do not have an additional data (i.e. cache) for the storage,
and &lt;code&gt;Local&lt;/code&gt; reuses the &lt;code&gt;FixedOffset&lt;/code&gt; as &lt;code&gt;Local&lt;/code&gt; itself has no state.
Other time zones have to cache its offset &lt;em&gt;and&lt;/em&gt; the transition data,
hence separate offset types.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TzFile&lt;/code&gt; and &lt;code&gt;TzRule&lt;/code&gt; is a part of tzdata support;
they will be typically used as a reference-counted version,
such as &lt;code&gt;Rc&amp;lt;TzFile&amp;gt;&lt;/code&gt; or &lt;code&gt;Arc&amp;lt;TzRule&amp;gt;&lt;/code&gt;,
to avoid the deep copying (which is common in Chrono).
&lt;code&gt;TzRule&lt;/code&gt; implements the rule string in POSIX &lt;code&gt;TZ&lt;/code&gt; environment variable,
which is not that useful by its own (since we can use &lt;code&gt;Local&lt;/code&gt; anyway),
but it's &lt;code&gt;TzFile&lt;/code&gt;'s solution to the aforementioned problem 1:
the future zone transition is encoded as a form of &lt;code&gt;TzRule&lt;/code&gt;,
and we need to implement it.&lt;/p&gt;
&lt;p&gt;At the end this new design is quite promising,
but even after &lt;code&gt;#![feature(associated_types)]&lt;/code&gt; is gone
associated types are still cutting edge features.
I had to disable debuginfo due to the Rust issue &lt;a href="https://github.com/rust-lang/rust/issues/21010"&gt;#21010&lt;/a&gt;, for example.
Hopefully though, this shall not affect the validity of this design.&lt;/p&gt;</summary></entry><entry><title>Worklog 2015-01-10</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2015-01-10.html" rel="alternate"></link><updated>2015-01-11T03:51:00+09:00</updated><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2015-01-11:rustlog/worklog-2015-01-10.html</id><summary type="html">&lt;p&gt;Okay, I was so frantic about the language updates and
went to (mostly) the library maintenance mode.
If you saw &lt;code&gt;encoding&lt;/code&gt; or &lt;code&gt;chrono&lt;/code&gt; from &lt;a href="https://crates.io/"&gt;crates.io&lt;/a&gt; a lot,
that's because I tended to update per &lt;em&gt;each&lt;/em&gt; breaking nightly.&lt;/p&gt;
&lt;p&gt;Anyways, we've finally got &lt;a href="http://blog.rust-lang.org/2015/01/09/Rust-1.0-alpha.html"&gt;1.0.0 alpha&lt;/a&gt; and
I can finally refrain from simply keeping libraries up.
I'm now working on Chrono 0.2, which will have a new &lt;code&gt;Offset&lt;/code&gt; design.&lt;/p&gt;
&lt;h2&gt;Grisu and rust-strconv&lt;/h2&gt;
&lt;p&gt;By the way, what happened to &lt;a href="https://github.com/lifthrasiir/rust-strconv/"&gt;rust-strconv&lt;/a&gt;?
In the previous (i.e. 3 week old) post
I've said the initial version of Grisu can be released within a week.
That was a serious misprediction and it actually took &lt;a href="https://github.com/lifthrasiir/rust-strconv/commit/81e4f157b90191ef335c2ad692e7ebd34221a367"&gt;two full weeks&lt;/a&gt;.
(What is Grisu, by the way? &lt;a href="http://www.serpentine.com/blog/2011/06/29/here-be-dragons-advances-in-problems-you-didnt-even-know-you-had/"&gt;Bryan O'Sullivan has a good introduction&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Grisu by itself is a simple algorithm to understand.
It first scales the input into a certain convenient range
(while keeping the exponent, obviously),
so that the range can be easily fit to &lt;code&gt;u64&lt;/code&gt;.
It then maintains two approximate ranges
for the actual range in which values would round to that number;
one overestimates, another underestimates.
Quoting the diagram in the comments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        +- actual range of minus
  | &amp;lt;---|---------------------- unsafe region --------------------------&amp;gt; |
  |     |                                                                 |
  |  |&amp;lt;---&amp;gt;|  | &amp;lt;--------------- safe region ---------------&amp;gt; |           |
  |  |     |  |                                               |           |
  |1 ulp|1 ulp|                 |1 ulp|1 ulp|                 |1 ulp|1 ulp|
  |&amp;lt;---&amp;gt;|&amp;lt;---&amp;gt;|                 |&amp;lt;---&amp;gt;|&amp;lt;---&amp;gt;|                 |&amp;lt;---&amp;gt;|&amp;lt;---&amp;gt;|
  |-----|-----|-------...-------|-----|-----|-------...-------|-----|-----|
  |   minus   |                 |     v     |                 |   plus    |
minus1     minus0           v - 1 ulp   v + 1 ulp           plus0       plus1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Both the scaled value and ranges are repeatedly narrowed down
until we are out of significant digits.
(There is one important inequality proved in the paper
which can be used to quickly test this.)
At this stage we have &lt;em&gt;one&lt;/em&gt; possible shortest representation,
so we try other representations to find the shortest representation
which is also closest to the actual value.
Finally, we can verify that it actually is in the underestimated range
so we can safely return it.
Each step has its own rounding error,
but it is well characterized so we account for that.&lt;/p&gt;
&lt;p&gt;The problem with implementing Grisu is not the complexity;
it's rather an analysis, which is very unwieldy to understand.
For example, the implementation shouldn't overflow,
and Grisu code actively avoids that,
but both the paper and the &lt;a href="https://github.com/v8/v8-git-mirror/blob/master/src/fast-dtoa.cc"&gt;code&lt;/a&gt; is shallow in details.
The code has an extensive documentation, but not a proof,
and it is very hard to be sure on edge cases.
At the end, it took almost a month to fully understand and write
&lt;a href="https://github.com/lifthrasiir/rust-strconv/blob/5cbbb53/src/flt2dec/strategy/grisu.rs#L212-L476"&gt;every required constraint&lt;/a&gt; in implementations down.
Frankly speaking, my comments wouldn't really help anyway
if you are to write your own reimplementation of Grisu,
but at least it should guide potential reviewers.&lt;/p&gt;
&lt;p&gt;Fortunately, my attempt has paid off.
Combined with Dragon it swiftly overshadows the original naive implementation
both in the performance (up to 1000x faster) and the accuracy.
I've exhaustively verified that
Grisu for &lt;code&gt;f32&lt;/code&gt; returns the same result as Dragon when it does give a result.
Just out of curiosity, I've also counted how many &lt;code&gt;f32&lt;/code&gt; does return &lt;code&gt;None&lt;/code&gt;;
there are precisely 17,763,160 such values
out of 2,139,095,039 positive finite values.
I have some idea for improving on severe cases&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;
but that would be another story.&lt;/p&gt;
&lt;p&gt;There are two more possible modes of floating point printing.
Grisu-like algorithm can be used to quickly try to print
a predefined number of significant digits
or up to certain number of digits after a decimal point if possible.
I have a working code to do the former (with an informal proof in progress),
but it seems not to fit well to the common interface shared by Dragon.
The common interface can notify that the following digits are zeroes,
but it is not very obvious that Grisu can report &lt;code&gt;None&lt;/code&gt; in that case.
(Grisu cannot really give the exact answer in this case.)
I'm currently studying the C++ implementation for possible resolution.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;In the worst case, 50% of 2^23 &lt;code&gt;f32&lt;/code&gt; values between 2^21 and 2^22
  return &lt;code&gt;None&lt;/code&gt; (it's 0.8% in the full range, for comparison).
  This is mostly due to Grisu's inability to handle
  the exact halfway cases very common to that range.
  Note that this range is relatively close to 1 (than many others),
  so it can impact the real world performance of Grisu.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Worklog 2014-12-20</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2014-12-20.html" rel="alternate"></link><updated>2014-12-21T00:01:00+09:00</updated><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2014-12-21:rustlog/worklog-2014-12-20.html</id><summary type="html">&lt;p&gt;This week we saw another series of breakages via the macro syntax reform. :)
I still didn't have much time to keep up,
so I mostly did the minimal maintenance work,
but still there are some significant tasks I've done this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/lifthrasiir/rust-encoding/commit/1803d8a7a7e442af2ecc7ea3a3cc419562a0276a"&gt;Encoding 0.2.8&lt;/a&gt; has been released.
  This is a significant, non-language-change fix due to
  the recent change to the Encoding specification.
  I've found a &lt;a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=27675"&gt;spec bug&lt;/a&gt; while working on that.&lt;/li&gt;
&lt;li&gt;I've written a small &lt;a href="https://github.com/rust-lang/rfcs/pull/532"&gt;RFC&lt;/a&gt; for
  changing the &lt;code&gt;mod&lt;/code&gt; keyword in &lt;code&gt;use&lt;/code&gt; to the &lt;code&gt;self&lt;/code&gt; keyword.
  This is my first RFC ever, so I'm glad the writing seems fine enough.&lt;/li&gt;
&lt;li&gt;I worked on the floating-point printing code of &lt;a href="https://github.com/lifthrasiir/rust-strconv"&gt;rust-strconv&lt;/a&gt;
  during the Korean Rust meetup today.
  I think I can release the initial version this week.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Worklog 2014-12-13</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2014-12-13.html" rel="alternate"></link><updated>2014-12-13T23:59:00+09:00</updated><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2014-12-13:rustlog/worklog-2014-12-13.html</id><summary type="html">&lt;p&gt;Due to the personal concerns I haven't do much things, but at least...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I've updated &lt;a href="https://github.com/lifthrasiir/rust-encoding/"&gt;rust-encoding&lt;/a&gt; and &lt;a href="https://github.com/lifthrasiir/rust-chrono"&gt;rust-chrono&lt;/a&gt; for opt-in &lt;code&gt;Copy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I've pushed a small &lt;a href="https://github.com/rust-lang/rust/issues/19719"&gt;fix&lt;/a&gt; for &lt;a href="https://github.com/rust-lang/rust/pull/19764"&gt;#19764&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I... think I've opened two issues (&lt;a href="https://github.com/rust-lang/rust/issues/19723"&gt;#19723&lt;/a&gt; and &lt;a href="https://github.com/rust-lang/rust/issues/19762"&gt;#19762&lt;/a&gt;) and
  started to work on the former. Not much, though.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately I didn't have spare time for working on &lt;a href="https://github.com/rust-lang/rust/pull/19606"&gt;#19606&lt;/a&gt;.
Maybe for the next week.&lt;/p&gt;</summary></entry><entry><title>Worklog 2014-12-09</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2014-12-09.html" rel="alternate"></link><updated>2014-12-10T00:17:00+09:00</updated><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2014-12-10:rustlog/worklog-2014-12-09.html</id><summary type="html">&lt;p&gt;Okay, I've released &lt;a href="https://github.com/lifthrasiir/rust-soundchange"&gt;rust-soundchange&lt;/a&gt; with a basic documentation and tests.
I've also pushed a &lt;a href="https://github.com/P1start/an-rs/pull/1"&gt;pull request&lt;/a&gt; to P1start's &lt;code&gt;an-rs&lt;/code&gt;,
let's see if it really is accepted :)&lt;/p&gt;
&lt;h2&gt;Notes on &lt;code&gt;english.sc&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://zompist.com/spell.html"&gt;Mark Rosenfelder's article&lt;/a&gt; links to a computerized rule file,
which I've used as a basis of rust-soundchange rules.
After some debugging, however, I found that the following rule is incorrect:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Incorrect&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="sr"&gt;/@/&lt;/span&gt;&lt;span class="n"&gt;VC&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_l&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="n"&gt;Correct&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="sr"&gt;/@/&lt;/span&gt;&lt;span class="n"&gt;VC&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_l&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This particular rule corresponds to the rule 38,
i.e. any vowel reduces to a schwa (&lt;code&gt;@&lt;/code&gt;) before final &lt;code&gt;l&lt;/code&gt; (as in &lt;code&gt;final&lt;/code&gt;),
but only when it is not the only vowel in that word and
&lt;em&gt;its sound value has been assigned by prior rules&lt;/em&gt;.
The original rule has incorrectly used an "any vowel" (&lt;code&gt;V&lt;/code&gt;) variable
in place of an "any &lt;em&gt;untranslated&lt;/em&gt; vowel" (&lt;code&gt;U&lt;/code&gt;) variable.&lt;/p&gt;
&lt;p&gt;It seems that &lt;code&gt;english.out&lt;/code&gt; itself is generated via the fixed rules
(and with this fix my implementation produces 100% exact output for this set)
but Rosenfelder forgot to update &lt;code&gt;english.sc&lt;/code&gt;. Oops.&lt;/p&gt;</summary></entry><entry><title>Worklog 2014-12-08</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2014-12-08.html" rel="alternate"></link><updated>2014-12-09T02:51:00+09:00</updated><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2014-12-09:rustlog/worklog-2014-12-08.html</id><summary type="html">&lt;p&gt;After some wrestling with rustc, I've taken some refresh.
I had a grand^Wstupid plan for improving &lt;a href="https://crates.io/crates/an"&gt;an&lt;/a&gt;,
by implementing a better spell-to-pronounciation algorithm and
using that to determine if the word starts with a vowel or not.
(Mostly for fun, but I also wanted to make some useful utility.)
I've now implemented an entirety of &lt;a href="http://zompist.com/spell.html"&gt;Mark Rosenfelder's algorithm&lt;/a&gt;
which has some test code like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spell_to_sound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;coffee&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;as_slice&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;kòfë&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spell_to_sound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;market&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;as_slice&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;môrkêt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spell_to_sound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ugly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;as_slice&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ûglë&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spell_to_sound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;high&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;as_slice&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hï&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spell_to_sound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;canal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;as_slice&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;känâl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;...Well, it still fails for some dozens of cases but it looks nice.
(Here I really mean that this doesn't exactly match the known output of the algorithm.
Since the algorithm itself is approximate,
if the bug actually &lt;em&gt;improves&lt;/em&gt; the error rate, I might leave it as is.)&lt;/p&gt;</summary></entry><entry><title>Worklog 2014-12-06</title><link href="https://lifthrasiir.github.io/rustlog/worklog-2014-12-06.html" rel="alternate"></link><updated>2014-12-07T13:09:00+09:00</updated><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2014-12-07:rustlog/worklog-2014-12-06.html</id><summary type="html">&lt;p&gt;I was continously working on &lt;a href="https://github.com/rust-lang/rust/issues/15309"&gt;#15309&lt;/a&gt;.
Basically, Rustdoc has a link to the source code and
&lt;em&gt;some&lt;/em&gt; items have gotten their links incorrect.
This is proved quite hard to solve, as I've outlined the cause,
and I'm still figuring out how to solve that.&lt;/p&gt;
&lt;h2&gt;Wonderful world of metadata&lt;/h2&gt;
&lt;p&gt;It is a relatively hidden piece of the fact in Rust,
but Rust compiler utilizes a &lt;em&gt;metadata&lt;/em&gt;
to track almost every information across multiple crates.&lt;/p&gt;
&lt;p&gt;In fact, it is not hard to see the metadata's very existence.
The metadata occupies a custom section in the excutable files or
a self-explanatory file name &lt;code&gt;rust.metadata.bin&lt;/code&gt; in rlibs.
Any standard utilities on those files can be used to see them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;readelf /usr/local/rust/lib/libstd-4e7c5e5c.so -S &lt;span class="p"&gt;|&lt;/span&gt; grep rustc -A1
  &lt;span class="o"&gt;[&lt;/span&gt;25&lt;span class="o"&gt;]&lt;/span&gt; .note.rustc       NOTE             00000000002ebaf0  000ebaf0
       00000000001da82a  &lt;span class="m"&gt;0000000000000000&lt;/span&gt;  WA       &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;     16
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the metadata can be very huge.
In this case, the section size is &lt;code&gt;0x1da82a&lt;/code&gt; bytes, i.e. about 1.9 megs.
How much is that? It's over 60% of the entire executable if you ask that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls -al /usr/local/rust/lib/libstd-4e7c5e5c.so
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; arachneng &lt;span class="m"&gt;3197472&lt;/span&gt; Dec  &lt;span class="m"&gt;5&lt;/span&gt; 22:00 /usr/local/rust/lib/libstd-4e7c5e5c.so
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Typical C/C++ compilers work on the simplitistic assumption,
namely, they can &lt;em&gt;mangle&lt;/em&gt; names to avoid any problem.
So when you have a function named &lt;code&gt;f&lt;/code&gt; with no argument and no return type,
its name is (say) mangled into &lt;code&gt;_Z1fv&lt;/code&gt; in some compilers and
&lt;code&gt;?f@@YAXXZ&lt;/code&gt; in other compilers, so that they cannot be linked against each other.
Some compilers (notably G++) explicitly require that
there is some &lt;em&gt;dummy&lt;/em&gt; symbol like &lt;code&gt;__gxx_personality_v0&lt;/code&gt;
and otherwise the link fails.&lt;/p&gt;
&lt;p&gt;This &lt;a href="https://en.wikipedia.org/wiki/Name_mangling"&gt;name mangling&lt;/a&gt; is actually a good practice.
Different compilers commonly have different ABIs (Application Binary Interfaces),
so mixing different ABIs in the same executable should be avoided.
Many ABIs actually seem to be compatible but they often differ in details.&lt;/p&gt;
&lt;p&gt;The problem is that, the name mangling gives too little information.
If you have a linker error, well, you have a variety of options to try.
You may have tried to link from G++ to VC++.
You may have your function name incorrect.
You may have... an extra &lt;code&gt;namespace&lt;/code&gt;. (Namespaces surely affect the name mangling.)
You may have some other type incorrect, on which your function depends.
Perhaps, you shouldn't link to that function at all, since it's a template.&lt;/p&gt;
&lt;p&gt;The metadata is a good complement to the name mangling.
It has every type information to the public items,
and (in the case of Rust) every trait implementation available.
If the item has to be inlined (or generic), the &lt;em&gt;contents&lt;/em&gt; of the item is
also available to the metadata so that
the compiler can inline its definition out of the original crate.&lt;/p&gt;
&lt;p&gt;And at the expense of this improvement,
the metadata structure is &lt;em&gt;damn&lt;/em&gt; complex and the client code can go wrong.&lt;/p&gt;
&lt;h2&gt;Identifying Definitions&lt;/h2&gt;
&lt;p&gt;It seems that the metadata is nothing to do with the documentation.
Unfortunately, #15309 is an example that the metadata is indeed important:
it is hard to identify definitions across multiple crates.&lt;/p&gt;
&lt;p&gt;Consider one example.
The trait &lt;code&gt;UnicodeChar&lt;/code&gt; is actually available in three places:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unicode::u_char::UnicodeChar&lt;/code&gt; (private)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unicode::char::UnicodeChar&lt;/code&gt; (reexported, public)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::char::UnicodeChar&lt;/code&gt; (reexported again, public)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since Rustdoc strips the private items,
the primary documentation is available as &lt;code&gt;unicode::char::UnicodeChar&lt;/code&gt;.
Now, how does Rustdoc know of this reexport when generating the docs for &lt;code&gt;std&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Incredibly the answer is &lt;em&gt;no&lt;/em&gt;―Rustdoc doesn't know about the reexports!
What it actually does is to simply link to the original definition and
hope it correctly redirects to the inlined reexports.
Sounds risky, huh? But this is &lt;a href="https://github.com/rust-lang/rust/blob/a31ad6b/src/librustdoc/html/render.rs#L104-L107"&gt;what Rustdoc actually handles reexports&lt;/a&gt;.
When Rustdoc has enough information to generate redirect pages(*), it will do;
Otherwise it will use those redirect pages.&lt;/p&gt;
&lt;p&gt;(*) I should mention that the metadata obviously contains the reexports.
Still, Rustdoc only sees the original items precisely because
the metadata decoder doesn't directly show the links from the reexport to the item.
And the original items contain, alas, a path to the original items and not reexports.&lt;/p&gt;
&lt;p&gt;Links to the source code pose another problem.
The compiled crate itself doesn't have the source code, quite reasonably.
In this matter, Rustdoc again relies on the prior incarnation of itself
to generate suitable redirects.
Now say that we have implemented &lt;a href="https://github.com/rust-lang/rust/issues/12932"&gt;#12932&lt;/a&gt;
and we have multiple source links in the single documentation page.
How would you do identify the correct link to redirect?&lt;/p&gt;
&lt;p&gt;The original code was using a unique identifier to each definition,
generated shortly before the analysis phase ("phase 3").
This is called a &lt;code&gt;NodeId&lt;/code&gt; (or its cross-crate version, &lt;code&gt;DefId&lt;/code&gt;)
and Rustdoc-generated pages will check if
the &lt;code&gt;gotosrc&lt;/code&gt; parameter contains a matching &lt;code&gt;NodeId&lt;/code&gt; to redirect.
This should have been correct unless the following were correct:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;NodeId&lt;/code&gt;s change when you change the source code.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, this is primarily because &lt;code&gt;NodeId&lt;/code&gt;s are used to identify a part of
abstract syntax tree (AST).
This is also why one cannot (normally) link to a recompiled crate (yet);
the stable ABI would be awesome but it's a huge undertaking.&lt;/p&gt;
&lt;p&gt;It seemed that #15309 only appears in the &lt;code&gt;alloc&lt;/code&gt; crate.
Ultimately this was because, &lt;code&gt;rustc&lt;/code&gt; sees &lt;code&gt;--cfg jemalloc&lt;/code&gt; but not &lt;code&gt;rustdoc&lt;/code&gt; doesn't.
This small option mostly affects the &lt;code&gt;alloc&lt;/code&gt; crate,
causing &lt;code&gt;DefId&lt;/code&gt;s change.&lt;/p&gt;
&lt;p&gt;Personally I learned lots about the metadata over the course of debugging,
but only after I gave up and tried to make a &lt;a href="https://gist.github.com/lifthrasiir/7fb50a52154ffc8c0b5e"&gt;custom metadata decoder&lt;/a&gt; in Python.
Then I realized that the metadata in question had a skewed &lt;code&gt;DefId&lt;/code&gt; and
instantly looked at the Makefile. Dang.
I really hope to see a proper analysis tool (&lt;a href="https://github.com/rust-lang/rust/issues/6912"&gt;#6912&lt;/a&gt;) for the metadata.&lt;/p&gt;
&lt;h2&gt;Possible Solutions&lt;/h2&gt;
&lt;p&gt;It's indeed hard to identify definitions across multiple crates!
We don't have a definite solution, and can only outline general directions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rustdoc should not identify definitions via a &lt;code&gt;DefId&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Rustdoc should be able to generate documentations from the compiled crate.
   (This is what &lt;a href="#19606"&gt;I'm currently working on&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;In general, the metadata should have a good notion
   to uniquely identify the definition independently of the source code change.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Phew! This post went too far than I first imagined. Hope you enjoyed this.&lt;/p&gt;</summary></entry><entry><title>The Beginning</title><link href="https://lifthrasiir.github.io/rustlog/the-beginning.html" rel="alternate"></link><updated>2014-12-06T18:48:00+09:00</updated><author><name>Kang Seonghoon</name></author><id>tag:lifthrasiir.github.io,2014-12-06:rustlog/the-beginning.html</id><summary type="html">&lt;p&gt;Hello, and welcome to the first post to the Rustlog!&lt;/p&gt;
&lt;p&gt;For everyone &lt;em&gt;not&lt;/em&gt; interested about the author:
I'm &lt;a href="http://mearie.org/about/kang-seonghoon.en"&gt;Kang Seonghoon&lt;/a&gt;, a Korean software developer doing funky things.
In the world of Rust I'm probably best known for
&lt;a href="https://github.com/lifthrasiir/rust-encoding"&gt;rust-encoding&lt;/a&gt;, a comprehensive character encoding library.
I also happen to enjoy talking on Moznet #rust (as known as &lt;code&gt;Yurume&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;So what the hell is this blog?&lt;/h2&gt;
&lt;p&gt;I have a separate personal &lt;a href="http://j.mearie.org/"&gt;journal&lt;/a&gt; in my website.
Probably many of you wouldn't understand its contents;
it's almost Korean only, and even though I've done some works to
make the &lt;em&gt;whole&lt;/em&gt; website bilingual,
the journal remains quite exclusive in Korean.
(I do have some &lt;a href="http://j.mearie.org/tagged/english"&gt;English posts&lt;/a&gt; though.)&lt;/p&gt;
&lt;p&gt;Still, I have a desire to write useful posts in English.
That's why I sometimes write to &lt;a href="https://gist.github.com/lifthrasiir/"&gt;Gist&lt;/a&gt;.
It is technically not a blog, but at least it is a comfortable place
to write a Markdown post.
I also have been motivated by the concept of "worklog"
as a daily diary for logging the day's work.&lt;/p&gt;
&lt;p&gt;So I'm going to give a shot.
&lt;strong&gt;Every Rust-related post in English from now on will go here.
Also, I'll try to write a short remainder about
whatever I've done with Rust every day ("worklog").&lt;/strong&gt;
I know this is very hard from the experience,
but at least I'll try to do so.
I'm kind of a yak-shaving personnel,
but this time I chose to stick to &lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt;
as it seems easy to install and &lt;em&gt;forget&lt;/em&gt; about it.&lt;/p&gt;
&lt;p&gt;I'd appreciate any feedback on the post available here,
but unless there is a link to the explicit feedback form,
please direct any feedback to my &lt;a href="http://mearie.org/about/contact.en"&gt;personal email&lt;/a&gt;.
I'm close to &lt;em&gt;hate&lt;/em&gt; the direct comments, so sorry about that.
And obviously my writing solely represents my own opinion
and not my employer's or organization's. :)&lt;/p&gt;</summary></entry></feed>